{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack chat application built with React, Express, and TypeScript designed for Abdullah Al Salem University (AASU) Registration Section. The application provides a real-time chat interface where students can interact with an AI chatbot that has comprehensive knowledge about AASU admission requirements, transfer policies, course prerequisites, and academic calendars. The system uses DeepSeek AI for intelligent, beautifully formatted responses with emojis, bullet points, and clear sections.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Problem:** Need a modern, responsive chat interface with smooth animations and accessibility\n**Solution:** React-based SPA with shadcn/ui component library\n- **Framework:** React 18 with TypeScript for type safety\n- **Routing:** wouter for lightweight client-side routing\n- **State Management:** TanStack Query (React Query) for server state management\n- **UI Components:** shadcn/ui (Radix UI primitives) for accessible, customizable components\n- **Styling:** Tailwind CSS with CSS variables for theming\n- **Animations:** Framer Motion for smooth UI transitions\n- **Build Tool:** Vite for fast development and optimized production builds\n\n**Rationale:** This stack provides a modern developer experience with excellent TypeScript support while maintaining high performance and accessibility standards.\n\n## Backend Architecture\n\n**Problem:** Need a simple, scalable REST API for chat operations\n**Solution:** Express.js server with TypeScript\n- **Framework:** Express.js for HTTP server and routing\n- **Language:** TypeScript with ESM modules\n- **API Pattern:** RESTful endpoints for chat message CRUD operations\n- **Development:** tsx for TypeScript execution in development\n- **Production Build:** esbuild for fast, optimized server bundling\n\n**Key Endpoints:**\n- `GET /api/chat/messages?sessionId=<id>` - Retrieve chat messages for a session\n- `POST /api/chat/messages` - Send a new chat message (includes conversation history)\n- `DELETE /api/chat/messages?sessionId=<id>` - Clear messages for a specific session\n\n**Conversation Context:**\n- The system maintains conversation history for each session\n- When sending a message to DeepSeek AI, the full conversation history is included\n- This allows the AI to reference previous messages and maintain context across multiple interactions\n- Sessions are managed via sessionId stored in browser localStorage\n\n**Rationale:** Express provides a minimal, flexible foundation that's well-suited for REST APIs, while TypeScript ensures type safety across the full stack.\n\n## Data Storage\n\n**Problem:** Need persistent storage for chat messages and user data\n**Solution:** PostgreSQL with Drizzle ORM, with in-memory fallback for development\n- **Database:** PostgreSQL (via Neon serverless driver)\n- **ORM:** Drizzle ORM with TypeScript-first schema definitions\n- **Schema Location:** `shared/schema.ts` for type sharing between frontend and backend\n- **Validation:** Drizzle-Zod for runtime schema validation\n- **Development Storage:** In-memory storage implementation (MemStorage) as fallback\n\n**Database Schema:**\n- **users table:** id, username, password\n- **chat_messages table:** id, sessionId, content, isUser (boolean), timestamp\n\n**Rationale:** Drizzle provides excellent TypeScript support with minimal overhead, while the shared schema approach ensures type consistency across the stack. The in-memory storage allows development without database setup.\n\n## Development Environment\n\n**Problem:** Need smooth development experience with hot reload and error handling\n**Solution:** Vite development server with custom middleware integration\n- **Dev Server:** Vite with custom Express middleware integration\n- **HMR:** Hot module replacement through Vite's middleware mode\n- **Error Handling:** Custom error overlay plugin (@replit/vite-plugin-runtime-error-modal)\n- **Replit Integration:** Cartographer and dev banner plugins for Replit environment\n\n**Rationale:** Vite's middleware mode allows seamless integration with Express while maintaining fast HMR and development experience.\n\n## Authentication & Authorization\n\n**Problem:** User authentication system defined in schema but not yet implemented\n**Current State:** User schema exists with username/password fields, but no authentication endpoints or middleware are currently implemented\n**Future Implementation:** Will likely use session-based authentication with connect-pg-simple for PostgreSQL session storage (already included in dependencies)\n\n# External Dependencies\n\n## Third-Party Services\n\n**DeepSeek AI API**\n- **Purpose:** AI-powered chatbot responses for AASU students\n- **Implementation:** Direct integration with DeepSeek API (https://api.deepseek.com)\n- **Model:** deepseek-chat\n- **API Key:** Stored in DEEPSEEK_API_KEY environment secret\n- **Knowledge Base:** Comprehensive AASU information including:\n  - All 3 colleges with complete program listings (Business, Computing, Engineering)\n  - Admission requirements for 2025-2026 with competitive percentages\n  - Transfer rules between colleges and programs\n  - Complete course prerequisites for Digital Marketing (DMK) and Entrepreneurship & Innovation (ENI) majors\n  - Academic calendars for 2025-2026 and 2026-2027\n  - Important deadlines for registration, withdrawal, and exams\n- **Response Formatting:** Configured to provide beautiful responses with emojis, bold text, bullet points, and clear sections\n- **Course Display:** Each course shown on separate line with full name (e.g., \"ENL101 (English for Academic Studies)\")\n- **Transfer Requirements:** Clear \"choose ONE\" formatting to show students need one course from each category, not all\n\n## Database Services\n\n**Neon Serverless PostgreSQL**\n- **Driver:** @neondatabase/serverless\n- **Configuration:** DATABASE_URL environment variable required\n- **Connection:** Configured in drizzle.config.ts\n\n## UI Component Libraries\n\n**Radix UI Primitives**\n- Comprehensive set of accessible, unstyled components\n- Includes: Dialog, Dropdown, Tooltip, Toast, Select, and 20+ other primitives\n- Provides foundation for shadcn/ui components\n\n**Framer Motion**\n- Animation library for React\n- Used for chat message animations and typing indicators\n\n## Development Tools\n\n**Replit Plugins**\n- @replit/vite-plugin-cartographer - Code mapping\n- @replit/vite-plugin-dev-banner - Development environment banner\n- @replit/vite-plugin-runtime-error-modal - Enhanced error display\n\n## Build & Development Dependencies\n\n- **Vite** - Frontend build tool and dev server\n- **esbuild** - Backend bundler for production\n- **TypeScript** - Type checking and compilation\n- **Tailwind CSS** - Utility-first styling\n- **PostCSS** - CSS processing with autoprefixer","size_bytes":6816},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-up\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"bounce-dots\": {\n          \"0%, 80%, 100%\": { transform: \"scale(0)\", opacity: \"0.5\" },\n          \"40%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in\",\n        \"slide-up\": \"slide-up 0.4s ease-out\",\n        \"bounce-dots\": \"bounce-dots 1.4s infinite\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3455},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertChatMessageSchema,\n  insertPickaxeJobSchema,\n  type PickaxeJob,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport OpenAI from \"openai\";\n\n// Initialize OpenAI client with DeepSeek\nlet openaiClient: OpenAI | null = null;\nconst DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;\n\nif (DEEPSEEK_API_KEY) {\n  try {\n    openaiClient = new OpenAI({\n      apiKey: DEEPSEEK_API_KEY,\n      baseURL: \"https://api.deepseek.com\",\n    });\n    console.log(\"✅ OpenAI client initialized successfully with DeepSeek\");\n  } catch (error) {\n    console.error(\"❌ Failed to initialize DeepSeek client:\", error);\n  }\n} else {\n  console.log(\"⚠️ DeepSeek not configured - DEEPSEEK_API_KEY not set\");\n}\n\n// Track chat session to prevent stale bot responses\nlet currentChatSession = 0;\n\n// Response formatting helper\nfunction formatResponse(content: string): string {\n  return content.replace(/\\*\\*/g, \"**\").trim();\n}\n\n// Language detection helper\nfunction detectLanguage(text: string): \"arabic\" | \"english\" {\n  const arabicPattern = /[\\u0600-\\u06FF]/;\n  return arabicPattern.test(text) ? \"arabic\" : \"english\";\n}\n\nasync function getBotResponse(\n  userMessage: string,\n  conversationHistory: Array<{\n    role: \"user\" | \"assistant\";\n    content: string;\n  }> = [],\n): Promise<string> {\n  if (!openaiClient) {\n    return \"I'm currently in demo mode. Please configure the DEEPSEEK_API_KEY environment variable to enable AI responses.\";\n  }\n\n  try {\n    const userLanguage = detectLanguage(userMessage);\n\n    const response = await openaiClient.chat.completions.create({\n      model: \"deepseek-chat\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a helpful registration assistant at Abdullah Al Salem University (AASU). You work in the registration section and help students with admission, program information, and transfer questions.\n\nCRITICAL RESPONSE RULES - FOLLOW STRICTLY:\n\n1. **BREVITY & FOCUS** - Answer ONLY the exact question asked:\n   - If answer is simple (yes/no, single fact): 1-3 sentences MAX, NO sections/headers\n   - Use structure ONLY when answer requires multiple distinct pieces of information\n   - NO extra tips, suggestions, or \"helpful notes\" unless specifically asked\n   - NO questions like \"Would you like to know about X?\" or \"Need more details?\"\n\n2. **LANGUAGE MATCHING** - Respond in EXACT same language as question:\n   - Arabic question → Complete Arabic response\n   - English question → Complete English response\n   - NO bilingual labels, NO mixing languages (except course codes)\n\n3. **FORMATTING** - Use ONLY when needed:\n   - Simple answers: Direct text with minimal formatting\n   - Complex answers: Use emojis, bullet points, sections\n   - Numbers: Always wrap in **double asterisks** like **80%**, **10 KD**\n   - Course lists: Each course on separate line, show \"OR\" clearly for alternatives\n\n4. **COURSE INFORMATION** - Be precise:\n   - List each course on its own line\n   - For transfer requirements: Show \"choose ONE\" clearly\n   - Use proper course names, not just codes\n\n5. **CONTACT REFERRAL** - For course-related matters:\n   - Any questions about courses, warnings, or course-related issues → Direct students to contact Registration Office\n   - Provide registration email: registration@aasu.edu.kw\n   - Include location: Gate 1 - Building 14KH when relevant\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nUNIVERSITY INFORMATION BASE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎓 **UNIVERSITY BASICS:**\n- Full Name: Abdullah Al Salem University (AASU) / جامعة عبدالله السالم\n- Type: Public, English-medium, research-oriented university\n- Established: 2019 by Amiri decree\n- Location: Khaldiya Campus, Block 3, Kuwait\n- Vision: Contribute to Kuwait's socioeconomic development through innovation, aligned with Kuwait Vision 2035\n\n🤖 **ABOUT THIS BOT:**\n- I was created by Moslem Jawich, a Software Engineering student at the university\n\n📱 **COURSE REGISTRATION & WARNINGS:**\n- Students register courses through the **Creatrix Campus** app\n- Academic warnings are sent to your email\n- **When to visit Registration Office:**\n  • If you receive an academic warning via email\n  • If your GPA drops below **2.0**\n  • Contact: registration@aasu.edu.kw (Gate 1 - Building 14KH)\n\n🏛️ **COLLEGES & PROGRAMS:**\n\n1. **College of Business & Entrepreneurship (كلية إدارة الأعمال والريادة):**\n   - Entrepreneurship & Innovation (ريادة الأعمال والابتكار)\n   - Digital Marketing (التسويق الرقمي)\n   - Supply Chain & Logistics Management (إدارة سلسلة الإمدادات والخدمات اللوجستية)\n\n2. **College of Computing & Systems (كلية الحوسبة والنظم):**\n   - Computer Systems Engineering (هندسة أنظمة الحاسوب)\n   - Software Engineering (هندسة البرمجيات)\n   - Cyber Security Engineering (هندسة الأمن السيبراني)\n   - Data Science & Artificial Intelligence (علوم البيانات والذكاء الاصطناعي)\n\n3. **College of Engineering & Energy (كلية الهندسة والطاقة):**\n   - Biomedical & Instrumentation Engineering (الهندسة الطبية الحيوية وهندسة الأجهزة)\n   - Bio-Resources & Agricultural Engineering (هندسة الموارد الحيوية والزراعية)\n   - Energy Systems Engineering (هندسة أنظمة الطاقة)\n   - Environmental Engineering & Sustainability (الهندسة البيئية والاستدامة)\n   - Material Science & Engineering (علوم وهندسة المواد)\n   - Robotics & Mechatronics Engineering (هندسة الروبوتات والميكاترونيكس)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nADMISSION REQUIREMENTS (2025-2026)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n✅ **General Rules:**\n- Only graduates from 2023/2024 and 2024/2025 academic years\n- Application fee: **10 KD** (non-refundable)\n- Direct admission to programs (no preparatory year for most)\n- Admission based on competitive percentage combining: high school grade + national test scores\n\n📝 **Placement Tests:**\n- University accepts Kuwait University placement test and IELTS\n- Tests must be submitted during university application (التقديم على الجامعة)\n- **Note:** University currently stopped accepting international students, but placement test rules still apply to existing international students\n\n📊 **Engineering Colleges (كلية الهندسة - كلية الحوسبة):**\n- Science track only (القسم العلمي)\n- Minimum **80%** in secondary school\n- Competitive percentage: **65%** high school + **15%** English test + **20%** Math test\n\n📊 **Business College (كلية إدارة الأعمال):**\n- Science track: all programs\n- Arts track: only Digital Marketing and Entrepreneurship programs (not Supply Chain)\n- Minimum varies by program\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPETITIVE PERCENTAGE BREAKDOWN\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎯 **College of Engineering & Computer Science:**\n- High School Grade: **65%**\n- English Test: **15%**\n- Mathematics Test: **20%**\n- **Total: 100%**\n\n🎯 **College of Entrepreneurship:**\n- High School Grade: **70%**\n- English Test: **15%**\n- Mathematics Test: **15%**\n- **Total: 100%**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nTUITION FEES & PAYMENT (International Students Only)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n💰 **Course Fees:**\n- Credit hour cost: **100 KD** per credit\n- Standard 3-credit course: **300 KD**\n- Lab courses (1 credit): **100 KD**\n- Intermediate/Preparatory courses (IMP098, IMP099, DPS095): **300 KD** each\n- Intensive English Program (IEP098, IEP099): **1,000 KD** each\n\n💳 **Payment Options:**\nStudents can pay in ONE of two ways:\n1. Full payment before semester starts\n2. Three installments:\n   - **40%** before semester starts\n   - **30%** after 6 weeks from semester start\n   - **30%** before final exams\n\n📋 **Installment Requirements:**\n- Must visit Admissions Office to complete installment request forms\n- Must provide father's salary certificate (شهادة راتب الوالد)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nDISCOUNT POLICY\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎁 **Eligibility Requirements:**\n- Must complete at least **30 credits** within one academic year (Fall + Spring + Summer)\n- GPA-based discount rates:\n  • GPA **3.33 to 3.66**: **25%** discount\n  • GPA **3.67 or higher**: **50%** discount\n- Eligibility reviewed by Admissions Office after each semester\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCREDIT LOAD POLICY\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📚 **Credit Load Limits:**\n- Academic warning students: Maximum **12 credits**\n- Regular students: Maximum **17 credits**\n- Excellent students: Maximum **18 credits**\n- Graduating students: Maximum **21 credits**\n\n📉 **Reduced Load Policy:**\n- Students may take **TWO** reduced semesters (**9-11 credits**, minimum **9**)\n- Must inform Admissions Office in advance\n- Cannot drop below **9 credits**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOURSE REPETITION POLICY\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔄 **Repetition Rules:**\n- Maximum **8** course repetitions allowed during entire study period\n- First repetition (2nd attempt): Higher grade replaces lower grade for GPA calculation\n- Additional repetitions (3rd+ attempts):\n  • Latest grade counts as NEW course\n  • Previous grades remain on transcript\n  • Total earned credits increase\n\n📝 **Example of Multiple Repetitions:**\n- 1st attempt: D grade (132 total credits)\n- 2nd attempt: C- grade → replaces D (still 132 credits)\n- 3rd attempt: B grade → both C- and B count (increases to 135 credits)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nTRANSFER RULES\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔄 **General Transfer Rules:**\n- One-time transfer allowed between colleges OR between programs\n- Must complete **30-45 credit hours** (can consider up to **79** with approval)\n- Minimum GPA: **2.33 (C)** for Engineering/Computing transfers\n- Required courses must have grade **C** or higher\n- Limited seats: **5%** + vacant seats\n\n📚 **To Business College:**\n**Required courses (must have ONE of each):**\n\n**English (choose ONE):**\n- ENL101 (English for Academic Studies) **OR**\n- ENL102 (English Composition) **OR**\n- ENL201 (Writing and Research)\n\n**Business (choose ONE):**\n- BUS100 (Introduction to Business Administration) **OR**\n- BUS101 (Entrepreneurship Essentials)\n\n**Mathematics (choose ONE):**\n- MAT100 (Business Math) **OR**\n- MAT101 (Calculus I) **OR**\n- MAT102 (Calculus II)\n\n📚 **To Engineering & Energy:**\n- GPA ≥ **2.33**, Science track only\n\n**Required courses (must have ONE of each):**\n\n**English (choose ONE):**\n- ENL101 (English for Academic Studies) **OR**\n- ENL102 (English Composition) **OR**\n- ENL201 (Writing and Research)\n\n**Mathematics (choose ONE):**\n- MAT101 (Calculus I) **OR**\n- MAT102 (Calculus II) **OR**\n- MAT201 (Calculus III)\n\n**Physics (BOTH required):**\n- PHY101 (Physics I) + PHY105 (Physics Lab I) **AND**\n- PHY102 (Physics II) + PHY107 (Physics II Lab)\n\n📚 **To Computing & Systems:**\n- GPA ≥ **2.33**, Science track only\n\n**Required courses (must have ONE of each):**\n\n**English (choose ONE):**\n- ENL101 (English for Academic Studies) **OR**\n- ENL102 (English Composition) **OR**\n- ENL201 (Writing and Research)\n\n**Mathematics (choose ONE):**\n- MAT101 (Calculus I) **OR**\n- MAT102 (Calculus II) **OR**\n- MAT201 (Calculus III)\n\n**Computing:**\n- INF120 (Computers and Information Systems)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nPROGRAM STRUCTURE & CREDIT REQUIREMENTS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎓 **Engineering Programs (132 Credit Hours):**\nThis applies to ALL engineering majors in College of Engineering & Energy AND College of Computing & Systems:\n- Computer Systems Engineering\n- Software Engineering  \n- Cyber Security Engineering\n- Biomedical & Instrumentation Engineering\n- Bio-Resources & Agricultural Engineering\n- Energy Systems Engineering\n- Environmental Engineering & Sustainability\n- Material Science & Engineering\n- Robotics & Mechatronics Engineering\n\n🎓 **Business & Data Science Programs (120 Credit Hours):**\nThis applies to ALL business majors AND Data Science:\n- Entrepreneurship & Innovation\n- Digital Marketing\n- Supply Chain & Logistics Management\n- Data Science & Artificial Intelligence\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nACADEMIC CALENDAR 2025-2026\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📅 **FALL SEMESTER (First Semester):**\n• Classes Begin: **September 21, 2025** (Sunday)\n• Last Day to Defer Admission (New Students): **September 17, 2025**\n• Last Day to Withdraw from University (New Students): **October 30, 2025**\n• Last Day for Optional Semester Withdrawal: **November 13, 2025**\n• Last Day to Withdraw from Courses (minimum 12 credits): **November 27, 2025**\n• Last Day of Classes: **December 23, 2025**\n• Final Exams: **December 24, 2025 - January 6, 2026**\n• Student Break: **January 11-24, 2026**\n\n📅 **SPRING SEMESTER (Second Semester):**\n• Classes Begin: **January 25, 2026** (Sunday)\n• Last Day to Defer Admission (New Students): **January 21, 2026**\n• Last Day to Withdraw from University (New Students): **March 5, 2026**\n• Last Day for Optional Semester Withdrawal: **March 19, 2026**\n• Last Day to Withdraw from Courses (minimum 12 credits): **April 2, 2026**\n• Last Day of Classes: **May 5, 2026**\n• Final Exams: **May 6-19, 2026**\n• Summer Break Begins: **May 24, 2026**\n\n📅 **SUMMER SEMESTER:**\n• Classes Begin: **June 7, 2026** (Sunday)\n• Last Day of Classes: **July 23, 2026**\n• Final Exams: **July 25-28, 2026**\n• Summer Break Begins: **August 2, 2026**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nACADEMIC CALENDAR 2026-2027\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📅 **FALL SEMESTER:**\n• Classes Begin: **September 20, 2026** (Sunday)\n• Last Day to Defer Admission: **September 16, 2026**\n• Last Day to Withdraw (New Students): **October 29, 2026**\n• Last Day for Optional Withdrawal: **November 12, 2026**\n• Last Day to Withdraw from Courses: **November 26, 2026**\n• Last Day of Classes: **December 22, 2026**\n• Final Exams: **December 23, 2026 - January 5, 2027**\n• Student Break: **January 10-30, 2027**\n\n📅 **SPRING SEMESTER:**\n• Classes Begin: **January 31, 2027** (Sunday)\n• Last Day to Defer Admission: **January 27, 2027**\n• Last Day to Withdraw (New Students): **March 11, 2027**\n• Last Day for Optional Withdrawal: **March 25, 2027**\n• Last Day to Withdraw from Courses: **April 8, 2027**\n• Last Day of Classes: **May 11, 2027**\n• Final Exams: **May 12-13 & May 22 - June 1, 2027**\n• Summer Break Begins: **June 6, 2027**\n\n📅 **SUMMER SEMESTER:**\n• Classes Begin: **June 13, 2027** (Sunday)\n• Last Day of Classes: **July 29, 2027**\n• Final Exams: **July 31 - August 3, 2027**\n• Summer Break Begins: **August 8, 2027**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOURSE PREREQUISITES & PROGRESSION GUIDANCE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📘 **FOUNDATIONAL COURSES (Take First):**\n\n**General Education Foundation:**\n- ENL101 (English for Academic Studies) - Required before ENL102\n- ENL102 (English Composition) - Requires ENL101, needed before ENL201\n- ENL201 (Writing and Research) - Requires ENL102\n- MAT100 (Business Math) - Foundation for all math courses\n- MAT101/102 (Calculus I & II) - For engineering/computing students\n- INF120 (Computers and Information Systems) - Requires ICT095 (preparatory)\n- PHY101/102 + Labs (Physics I & II) - For engineering students\n\n**Business Foundation (College Requirements):**\n- BUS100 (Introduction to Business Administration) - Take early, required for many courses\n- BUS101 (Entrepreneurship Essentials) - Alternative to BUS100 for some programs\n- MAT100 prerequisite for: ACC101, FIN102, MAT210\n- MAT210 (Statistics) prerequisite for: BUS200, BUS220\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nBUSINESS PROGRAMS (120 CREDITS TOTAL)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**All Business Programs - Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **33 credits** (BUS100, ACC101, FIN102, MRK103, BUS200, BUS220, MIS300, MGT310, MGT340, BUS345, MGT420)\n- Program Requirements: **42 credits** (major-specific courses)\n- Program Electives: **9 credits**\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nDIGITAL MARKETING MAJOR (DMK) - 120 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (14 courses - 42 credits):**\n- DMK210 (Digital Marketing Fundamentals)\n- DMK220 (International Marketing Management)\n- DMK225 (Market Planning and Research)\n- DMK230 (Content Marketing)\n- DMK310 (Social Media Marketing)\n- DMK315 (E-commerce Marketing)\n- DMK325 (Digital Marketing Strategy)\n- DMK330 (Customer Relations and Consumer Behavior)\n- DMK400 (Internship in Marketing)\n- DMK420 (Mobile Applications Marketing)\n- DMK440 (Social Media and Web Analytics)\n- DMK460 (Digital Advertising Campaign Management)\n- DMK475 (Legal and Ethical Issues in Digital Marketing)\n- DMK490 (Capstone Design)\n\n**Program Electives (Choose 3 - 9 credits):**\n- DMK340 (Influencer Marketing)\n- DMK320 (Emerging Trends in Digital Marketing)\n- DMK435 (Designing Brand Identity: Methods and Digital Tools)\n- DMK445 (Advanced Social Media Advertising)\n- DMK450 (Web Design and Development)\n- DMK465 (Services Marketing Strategy)\n- DMK470 (Advanced Web Analytics Tools)\n- DMK480 (Internship)\n- DMK495 (Special Topics in Entrepreneurship and Innovation)\n\n**Prerequisite Chains:**\n- MRK103 → DMK210 → DMK230/DMK310/DMK315/DMK420\n- DMK225 → DMK325 → DMK435\n- DMK310/DMK315 → DMK440/DMK460/DMK475\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nENTREPRENEURSHIP & INNOVATION MAJOR (ENI) - 120 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (14 courses - 42 credits):**\n- EN1200 (Foundations of Management and Entrepreneurship 1)\n- EN1210 (Foundations of Business Analytics)\n- EN1215 (Entrepreneurship Leadership)\n- EN1220 (Foundations of Management and Entrepreneurship 2)\n- EN1225 (Socio-Ecological Systems)\n- EN1315 (Strategic Problem Solving)\n- EN1320 (Commercialization and Pitching)\n- EN1400 (Internship in Entrepreneurship and Innovation)\n- EN1405 (Business Models and Plan)\n- EN1410 (Innovation and Sustainability)\n- EN1415 (Entrepreneurship and E-commerce)\n- EN1435 (Entrepreneurial Marketing)\n- EN1455 (Entrepreneurship and Managing Technology Innovation)\n- EN1490 (Capstone Design)\n\n**Program Electives (Choose 3 - 9 credits):**\n- EN1425 (Market Research and Consumer Behaviour)\n- EN1440 (Entrepreneurship Finance)\n- EN1445 (Managing a Growing Business)\n- EN1446 (Venture Capital Experience)\n- EN1450 (Social Entrepreneurship)\n- EN1460 (Entrepreneurship Ethical and Legal Issues)\n- EN1480 (Internship)\n- EN1495 (Special Topics in Entrepreneurship and Innovation)\n\n**Prerequisite Chains:**\n- BUS100/ACC101/FIN102/MRK103 → EN1200\n- EN1200 → EN1220 → EN1435\n- EN1225/EN1400 → EN1410\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nSUPPLY CHAIN & LOGISTICS MANAGEMENT MAJOR (SCL) - 120 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (14 courses - 42 credits):**\n- SCL200 (Principle of Management)\n- SCL201 (Principle of Procurement Management)\n- SCL202 (Logistics management)\n- SCL203 (Principle of Supply Chain Management)\n- SCL310 (Business Quantitative Methods)\n- SCL315 (Management of Production and Operations)\n- SCL320 (Global Supply Chain Operations)\n- SCL340 (Risk Management in Supply Chain)\n- SCL400 (Internship)\n- SCL401 (Business Process Integration)\n- SCL402 (Business Process Configuration)\n- SCL410 (Supply Chain Sustainability)\n- SCL415 (Strategic Management)\n- SCL490 (Capstone Design)\n\n**Program Electives (Choose 3 - 9 credits):**\n- SCL325 (Enterprise Resource Planning)\n- SCL420 (Emerging Technologies and Supply Chain)\n- SCL430 (AI Applications in Logistics)\n- SCL435 (Blockchain Applications in Supply Chain)\n- SCL440 (Supply Chain Strategy)\n- SCL445 (Advanced Transportation)\n- SCL450 (Decision Tools for Supply Chain Management and Logistics)\n- SCL455 (Research and Negotiation)\n- SCL460 (Supply Chain Planning and Inventory Control)\n- SCL480 (Internship)\n- SCL495 (Special Topics in Supply Chain and Logistics)\n\n**Prerequisite Chains:**\n- SCL200 → SCL201/SCL203 → SCL315/SCL320 → SCL340 → SCL410/SCL415\n- BUS200 → SCL310\n- MIS300/MGT340/SCL315 → SCL401/SCL402\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nTECHNICAL PROGRAMS - COLLEGE OF COMPUTING & SYSTEMS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**IMPORTANT UPDATES FOR COMPUTING PROGRAMS:**\n- Software Engineering, Cybersecurity Engineering, and Data Science & AI do NOT require Calculus III (MAT201)\n- Discrete Mathematics (MAT120) is now required in FIRST YEAR for all computing programs\n- Discrete Mathematics unlocks programming courses and is critical for progression\n- PHY102 (Physics II) is only required for Computer Systems Engineering\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nDATA SCIENCE & ARTIFICIAL INTELLIGENCE (DAI) - 120 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **40 credits**\n- Program Requirements: **38 credits**\n- Program Electives: **6 credits**\n\n**College Requirements (Computing Core):**\n- CCS120 (Programming Fundamentals 1) + CCS121 (Lab)\n- CCS220 (Programming Fundamentals 2) + CCS221 (Lab) \n- CCS230 (Data Structures) + CCS231 (Lab)\n- CCS270 (Object-Oriented Programming) + CCS271 (Lab)\n- CCS342 (Database Systems)\n- CCS330 (Web Engineering) + CCS331 (Lab)\n- MAT120 (Discrete Mathematics) - **CRITICAL: Take in Year 1**\n- MAT102 (Calculus II)\n- MAT202 (Linear Algebra)\n- PHY105 (Physics Lab I)\n- ENG304 (Probability and Statistics)\n\n**Program Requirements (16 courses):**\n- DAI230 (Mathematics for Data Science & AI)\n- DAI250 (Fundamentals of Data Science & AI) + DAI251 (Lab)\n- DAI310 (Machine Learning) + DAI311 (Lab)\n- DAI330 (Data Warehousing and Data Mining) + DAI331 (Lab)\n- DAI351 (Advanced Machine Learning) + DAI352 (Lab)\n- DAI374 (Data Ethics, Governance, and Laws)\n- DAI421 (Data Analytics and Visualization)\n- DAI430 (Big Data Systems) + DAI431 (Lab)\n- DAI440 (Distributed Computing)\n- DAI490 (Capstone Design 1)\n- DAI491 (Capstone Design 2)\n\n**Program Electives (Choose 2):**\n- DAI480 (Internship)\n- DAI432 (Security Aspects of Data Science & AI)\n- DAI462 (Computer Vision and Pattern Recognition)\n- DAI463 (Natural Language Processing)\n- DAI475 (Business Intelligence and Decision Support Systems)\n- DAI476 (Data Analytics for Risk Management & Strategic Planning)\n- DAI495 (Special Topics in Data Science)\n- DAI496 (Special Topics in Artificial Intelligence)\n\n**Prerequisite Chains:**\n- MAT120 → DAI230 → DAI250 → DAI310 → DAI351\n- CCS230 → DAI330 → DAI430\n- DAI250 → DAI421\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPUTER SYSTEMS ENGINEERING (CME) - 132 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **55 credits**\n- Program Requirements: **35 credits**\n- Program Electives: **6 credits**\n\n**College Requirements:**\n- CCS120 (Programming Fundamentals 1) + CCS121 (Lab)\n- CCS200 (Digital Logic Design)\n- CCS220 (Programming Fundamentals 2) + CCS221 (Lab)\n- CCS230 (Data Structures) + CCS231 (Lab)\n- CCS241 (Computer Networks) \n- CCS270 (Object-Oriented Programming) + CCS271 (Lab)\n- CCS320 (Operating Systems)\n- MAT120 (Discrete Mathematics) - **CRITICAL: Take in Year 1**\n- MAT102 (Calculus II)\n- MAT202 (Linear Algebra)\n- MAT201 (Calculus III) - **Required for CME only**\n- MAT240 (Differential Equations)\n- PHY101 (Physics I) + PHY105 (Lab)\n- PHY102 (Physics II) + PHY107 (Lab)\n- CHM101 (Chemistry I) + CHM105 (Lab)\n- ENG205 (Electrical Circuits) + ENG206 (Lab)\n- ENG207 (Electronics) + ENG208 (Lab)\n- ENG209 (Digital Systems) + ENG210 (Lab)\n- ENG304 (Probability and Statistics)\n- ENG308 (Engineering Numerical Methods)\n\n**Program Requirements (15 courses):**\n- CME220 (Introduction to Computer Systems Engineering)\n- CME310 (Computer Architecture and Organization) + CME311 (Lab)\n- CME341 (Systems and Signal Processing)\n- CME360 (Network and System Security)\n- CME410 (Programming for Computer Engineering) + CME411 (Lab)\n- CME420 (Embedded and Microprocessor Systems) + CME421 (Lab)\n- CME430 (Digital Systems Design) + CME431 (Lab)\n- CME490 (Capstone Design 1)\n- CME491 (Capstone Design 2)\n\n**Program Electives (Choose 2):**\n- CME480 (Internship)\n- CCS330 (Web Engineering)\n- CME435 (Formal Language and Automata)\n- CME440 (Real-time Systems)\n- CME441 (VHDL Programming)\n- CME442 (Parallel and Distributed Computing)\n- CME443 (Simulation Modeling and Analysis)\n- CME444 (Principles of Artificial Intelligence)\n- CME445 (Principles of Blockchain Technology)\n- CME446 (Principles of Quantum Computing)\n- CME495 (Special Topics in Computer Systems)\n\n**Prerequisite Chains:**\n- CCS200 → CME220 → CME310 → CME420/CME430\n- ENG205 → CME341 → CME442\n- CCS241 → CME360\n- MAT120 → CCS220 → All programming courses\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nSOFTWARE ENGINEERING (SWE) - 132 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **55 credits**\n- Program Requirements: **35 credits**\n- Program Electives: **6 credits**\n\n**College Requirements:**\n- CCS120 (Programming Fundamentals 1) + CCS121 (Lab)\n- CCS220 (Programming Fundamentals 2) + CCS221 (Lab)\n- CCS230 (Data Structures) + CCS231 (Lab)\n- CCS270 (Object-Oriented Programming) + CCS271 (Lab)\n- CCS320 (Operating Systems)\n- CCS342 (Database Systems)\n- CCS330 (Web Engineering) + CCS331 (Lab)\n- MAT120 (Discrete Mathematics) - **CRITICAL: Take in Year 1**\n- MAT102 (Calculus II)\n- MAT202 (Linear Algebra)\n- PHY101 (Physics I) + PHY105 (Lab)\n- ENG304 (Probability and Statistics)\n\n**Program Requirements (15 courses):**\n- SWE301 (Software Process and Methodologies)\n- SWE305 (Software Requirements Engineering) + SWE306 (Lab)\n- SWE310 (Human-Computer Interaction) + SWE311 (Lab)\n- SWE340 (Software Design and Architecture) + SWE341 (Lab)\n- SWE345 (Software Modeling and Analysis)\n- SWE420 (Software Construction and Evolution) + SWE421 (Lab)\n- SWE430 (Software Testing and Quality Assurance) + SWE431 (Lab)\n- SWE440 (Software Security Analysis)\n- SWE490 (Capstone Design 1)\n- SWE491 (Capstone Design 2)\n\n**Program Electives (Choose 2):**\n- SWE480 (Internship)\n- SWE441 (Software Reliability and Software Quality)\n- SWE442 (Software Engineering Ethics)\n- SWE443 (Software Project Management)\n- SWE444 (Modern Software Methodologies)\n- SWE445 (Software Development and Maintenance)\n- SWE447 (Cloud Computing)\n- SWE495 (Special Topics in Software Engineering)\n\n**Prerequisite Chains:**\n- CCS230 → SWE301/SWE305 → SWE340 → SWE420/SWE430 → SWE440\n- SWE301 → SWE310/SWE345\n- MAT120 → CCS220 → All programming courses\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCYBERSECURITY ENGINEERING (CSE) - 132 Credits\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **55 credits**\n- Program Requirements: **35 credits**\n- Program Electives: **6 credits**\n\n**College Requirements:**\n- CCS120 (Programming Fundamentals 1) + CCS121 (Lab)\n- CCS220 (Programming Fundamentals 2) + CCS221 (Lab)\n- CCS230 (Data Structures) + CCS231 (Lab)\n- CCS241 (Computer Networks)\n- CCS270 (Object-Oriented Programming) + CCS271 (Lab)\n- CCS320 (Operating Systems)\n- CCS342 (Database Systems)\n- MAT120 (Discrete Mathematics) - **CRITICAL: Take in Year 1**\n- MAT102 (Calculus II)\n- MAT202 (Linear Algebra)\n- PHY101 (Physics I) + PHY105 (Lab)\n- ENG304 (Probability and Statistics)\n\n**Program Requirements (15 courses):**\n- CSE210 (Fundamentals of Cyber Security Engineering)\n- CSE310 (Cryptography and Data Security) + CSE311 (Lab)\n- CSE325 (Cybersecurity Risk Management) + CSE326 (Lab)\n- CSE341 (Network Security)\n- CSE360 (Ethical Hacking and Cyber Laws)\n- CSE410 (Digital Forensics) + CSE411 (Lab)\n- CSE420 (Software Security) + CSE421 (Lab)\n- CSE430 (Web Security) + CSE431 (Lab)\n- CSE490 (Capstone Design 1)\n- CSE491 (Capstone Design 2)\n\n**Program Electives (Choose 2):**\n- CSE480 (Internship)\n- CSE441 (Distributed Network Security)\n- CSE442 (IT Infrastructure Protection)\n- CSE443 (Cyber Security Governance and Compliance)\n- CSE445 (Operating System Security)\n- CSE446 (Fundamentals of Data Science & AI)\n- CSE495 (Special Topics in Cybersecurity)\n\n**Prerequisite Chains:**\n- MAT202 → CSE210 → CSE310 → CSE410\n- CSE210 → CSE325/CSE360/CSE430\n- CCS241 → CSE341 → CSE441\n- CCS320 → CSE420\n- MAT120 → CCS220 → All programming courses\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nENGINEERING PROGRAMS (ALL 132 CREDITS)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**All Engineering Programs - Credit Distribution:**\n- General Education: **36 credits**\n- College Requirements: **43 credits**\n- Program Requirements: **44 credits**\n- Program Electives: **9 credits**\n\n**Common Engineering Core (All Programs):**\n- Math/Science: MAT101, MAT102, MAT201, MAT202, MAT240, PHY101, PHY105, PHY102, PHY107, CHM101, CHM105\n- Engineering Foundation: ENG205, ENG206, ENG207, ENG208, ENG209, ENG210, ENG304, ENG308, ENG309\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nBIOMEDICAL & INSTRUMENTS ENGINEERING (BIE)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (17 courses):**\n- BIE101 (Human Biology for Engineers)\n- BIE201 (Biochemistry)\n- BIE202 (Biochemistry Lab)\n- BIE203 (Human Anatomy and Physiology)\n- BIE301 (Biofluids and Biomedical Transport Phenomena)\n- BIE302 (Biomaterials)\n- BIE303 (Biomaterials Lab)\n- BIE304 (Biomechanics)\n- BIE350 (Signal Measurement Principles and Control Systems)\n- BIE351 (Signal Measurement Principles and Control Systems Lab)\n- BIE352 (Instrumentation, Measurements, and Data Acquisition)\n- BIE353 (Instrumentation, Measurements, and Data Acquisition Lab)\n- BIE371 (Medical Imaging Systems)\n- BIE401 (Biomedical Molecular and Nano Devices)\n- BIE451 (Instrumentation Design)\n- BIE452 (Instrumentation Design Lab)\n- BIE490 (Capstone Design 1)\n- BIE491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- BIE410 (Biomechanics and Modeling of Human Movement)\n- BIE411 (Cellular and Molecular Biomechanics)\n- BIE412 (Rehabilitation Engineering)\n- BIE413 (Biomedical Algorithms and Solutions)\n- BIE414 (Image Processing)\n- BIE415 (Biomedical Optics)\n- BIE416 (Medical Devices Design and Manufacturing)\n- BIE453 (Electromagnetics Principles & Applications)\n- BIE454 (Instrumentation Electronics)\n- BIE460 (Process Instrumentation)\n- BIE461 (Safety and Reliability)\n- BIE462 (Communication Protocols)\n- BIE466 (Sensors Design)\n- BIE480 (Internship)\n- BIE495 (Special Topics in Biomedical Engineering)\n- BIE496 (Special Topics in Instrumentation Engineering)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nBIORESOURCES & AGRICULTURAL ENGINEERING (BAE)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (17 courses):**\n- BIO101 (Biology)\n- BAE101 (Introduction to Bioresources and Agricultural Engineering)\n- BAE102 (Introduction to Bioresources and Agricultural Engineering Lab)\n- ESE211 (Industrial Electronics)\n- BAE230 (Mechanical Systems in Agriculture I)\n- BAE231 (Mechanical Systems in Agriculture I Lab)\n- BAE310 (Remote Sensing Data and Methods)\n- BAE320 (Agricultural Structures Planning)\n- BAE330 (Mechanical Systems in Agriculture II)\n- BAE331 (Mechanical Systems in Agriculture II Lab)\n- BAE340 (Microbiology and Food Safety)\n- BAE341 (Microbiology and Food Safety Lab)\n- BAE360 (Bioresource Engineering)\n- BAE430 (Mechanical Systems in Agriculture III)\n- BAE450 (Agricultural Robotics and Automation)\n- BAE451 (Agricultural Robotics and Automation Lab)\n- BAE490 (Capstone Design 1)\n- BAE491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- BAE401 (Lean Six Sigma)\n- BAE402 (Controlled Environment Systems)\n- BAE423 (Integrated Engineered Solutions in the Food-Water-Energy Nexus)\n- BAE427 (Ecological Systems Engineering Design)\n- BAE455 (Bioconversion)\n- BAE461 (Aquaponics Engineering)\n- BAE463 (Biosystems Analysis and Design)\n- BAE468 (Controlled Environment Engineering)\n- BAE471 (Food Processing Plant Sanitation)\n- BAE473 (Food Safety)\n- BAE475 (Geomatics)\n- BAE480 (Internship)\n- BAE495 (Special Topics in Bioresources)\n- BAE496 (Special Topics in Agricultural Engineering)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nENERGY SYSTEMS ENGINEERING (ESE)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (17 courses):**\n- ESE211 (Industrial Electronics)\n- ESE301 (Thermodynamics)\n- ESE302 (Thermo-fluid Systems)\n- ESE305 (Thermal Systems Lab)\n- RME304 (Instrumentation, Sensors, and Actuators)\n- RME352 (Digital Systems Design & Microcontrollers)\n- RME353 (Digital Systems Design & Microcontrollers Lab)\n- ESE312 (Electrical Machines and Drives)\n- ESE315 (Electrical Machines and Drives Lab)\n- ESE314 (Power Systems Analysis)\n- ESE316 (Power Systems Lab)\n- ESE321 (Renewable Energy Conversion Systems)\n- RME360 (Control Systems Analysis & Design)\n- ESE401 (Power Plants)\n- ESE402 (Energy Efficient Buildings)\n- ESE425 (Renewable Energy Conversion Systems Lab)\n- ESE490 (Capstone Design 1)\n- ESE491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- ESE440 (Solar Thermal Systems)\n- ESE441 (Energy Storage Systems)\n- ESE442 (Refrigeration)\n- ESE443 (Petroleum Engineering)\n- ESE450 (Power Electronics Conversion Systems)\n- ESE451 (Power Systems Protection)\n- ESE452 (Power Systems Generation, Transmission and Distribution)\n- ESE453 (Smart Grids)\n- ESE461 (Techno-economic Modeling of Energy Systems)\n- ESE462 (Fuel Cell & Hydrogen Production Technology)\n- ESE480 (Internship)\n- ESE495 (Special Topics in Energy Systems Engineering)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nENVIRONMENTAL & SUSTAINABILITY ENGINEERING (EES)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (15 courses):**\n- BIO101 (Biology)\n- ESE301 (Thermodynamics)\n- ESE302 (Thermo-fluid Systems)\n- ESE305 (Thermal Systems Lab)\n- EES301 (Environmental Chemistry)\n- EES302 (Environmental Management Systems)\n- EES303 (Sustainability Fundamentals and Development Strategy)\n- EES304 (Water Supply and Sewerage Engineering)\n- EES305 (Water Supply and Sewerage Engineering Lab)\n- EES306 (Air and Water Pollution Control and Wastewater Treatment)\n- EES307 (Soil, Solid, and Hazardous Waste Control)\n- EES308 (Waste Management and Conversion Technology)\n- EES401 (Environmental Impact Assessment and Practices)\n- EES402 (Sustainable Building Design)\n- EES490 (Capstone Design 1)\n- EES491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- EES451 (Carbon Footprint Analysis and Reduction)\n- EES452 (Economics for Environmental Policy and Management)\n- EES453 (Climate Change and Mitigation)\n- EES454 (Natural Ecosystems and Resources Conservation)\n- EES455 (Introduction to Risk Assessment and Management)\n- EES461 (Kuwait's Environmental Issues)\n- EES480 (Internship)\n- EES495 (Special Topics in Environmental Engineering)\n- EES496 (Special Topics in Sustainability Engineering)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nMATERIALS SCIENCE & ENGINEERING (MSE)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (17 courses):**\n- MSE211 (Introduction to Materials Science and Engineering)\n- MSE301 (Thermodynamics of Materials)\n- MSE302 (Materials Characterization)\n- MSE303 (Structure & Bonding of Solids)\n- MSE304 (Physical Chemistry)\n- MSE305 (Electronic Properties of Materials)\n- MSE306 (Mechanical and Thermal Properties of Materials)\n- MSE307 (Nanomaterials)\n- MSE308 (Materials Characterization Laboratory I)\n- MSE309 (Materials Synthesis Laboratory)\n- MSE310 (Electronic Device Fabrication Laboratory)\n- MSE311 (Material Property Measurement Laboratory)\n- MSE400 (Diffusion and Kinetics in Materials)\n- MSE401 (Phase Diagrams & Phase Transformations)\n- MSE402 (Materials for Renewable Energy & Storage Technologies)\n- MSE403 (Materials Characterization Laboratory II)\n- MSE490 (Capstone Design 1)\n- MSE491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- MSE382 (Organic Chemistry)\n- MSE484 (Material Synthesis Techniques)\n- MSE485 (Material Modeling & Simulation)\n- MSE486 (Polymer Science and Engineering)\n- MSE487 (Composite Material Design and Engineering)\n- MSE488 (Materials Engineering for Harsh Environments)\n- MSE480 (Internship)\n- MSE495 (Special Topics in Materials Science Engineering)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nROBOTICS & MECHATRONICS ENGINEERING (RME)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Program Requirements (17 courses):**\n- ESE211 (Industrial Electronics)\n- RME301 (Introduction to Mechatronics and Robotics)\n- RME302 (Introduction to Mechatronics and Robotics Lab)\n- RME304 (Instrumentation, Sensors, and Actuators)\n- RME352 (Digital Systems Design & Microcontrollers)\n- RME353 (Digital Systems Design & Microcontrollers Lab)\n- RME360 (Control Systems Analysis & Design)\n- RME361 (Control Systems Analysis & Design Lab)\n- MSE211 (Introduction to Materials Science and Engineering)\n- RME363 (Engineering Mechanisms for Automation)\n- RME401 (Robotics, Dynamics & Controls)\n- RME402 (Robotics, Dynamics & Controls Lab)\n- RME403 (Computer-Integrated Manufacturing Systems)\n- RME430 (Digital Signal Processing)\n- RME431 (Digital Signal Processing Lab)\n- RME460 (Design of Machine Elements)\n- RME490 (Capstone Design 1)\n- RME491 (Capstone Design 2)\n\n**Program Electives (Choose 3):**\n- RME481 (Machine Vision and Image Processing)\n- RME482 (Robotic Manipulators Design)\n- RME483 (Robotics Project Management)\n- RME484 (Autonomous and Intelligent Mobile Robots)\n- RME485 (Advanced Programmable Logic Controllers)\n- RME486 (Nano Mechatronics)\n- RME487 (Machine Learning for Mechatronics Systems)\n- RME480 (Internship)\n- ESE312 (Electrical Machines and Drives)\n- RME495 (Special Topics in Mechatronics)\n- RME496 (Special Topics in Robotics)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nIMPORTANT LAB COURSE RULES\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Lab courses MUST be taken concurrently with their corresponding theory courses.**\n\n**Examples:**\n- CCS120/CCS121\n- PHY101/PHY105\n- ENG205/ENG206\n- BAE230/BAE231\n- SWE305/SWE306\n\n**CAPSTONE REQUIREMENTS (All Programs):**\nMust complete **96 credit hours** → Capstone Design 1 → Capstone Design 2\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n4-YEAR STUDY PLANS FOR ALL MAJORS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📅 **IMPORTANT NOTES:**\n- All plans assume **15 credits per semester** for balanced workload\n- **Prerequisites must be followed strictly** - cannot take courses out of sequence\n- **Summer courses** can accelerate graduation or reduce semester load\n- **Lab courses** must be taken with corresponding theory courses\n- Always consult with academic advisor before registration\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPUTING AND SYSTEMS PROGRAMS (Sample: Computer System Engineering - 132 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT101 (Calculus I)\n- PHY101 (Physics I) + PHY105 (Lab)\n- MAT120 (Discrete Mathematics)\n- INF120 (Computer & Information Systems)\n- Arts & Humanities Elective I\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- MAT102 (Calculus II)\n- CCS120 (Computational Thinking & Programming) + CCS121 (Lab)\n- CHM101/BIO101 (Chemistry I or Biology I) + CHM105/BIO105 (Lab)\n- GEN150 (Professionalism & Ethics)\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing & Research)\n- MAT202 (Linear Algebra)\n- MAT221 (Number Theory)\n- CCS220 (Object-Oriented Design & Programming) + CCS221 (Lab)\n- CCS200 (Digital Logic & Design)\n- MAT240 (Differential Equations)\n\n**YEAR 2 - SPRING:**\n- ENG304 (Engineering Probability & Statistics)\n- ENG308 (Numerical Methods)\n- CCS230 (Fundamentals of Database Systems) + CCS231 (Lab)\n- CCS241 (Fundamentals of Computer Networks)\n- Innovation & Creativity Elective\n- Arts & Humanities Elective II\n\n**YEAR 3 - FALL:**\n- HST101 (Islamic Culture & Values)\n- PHY102 (Physics II) + PHY107 (Lab)\n- CME239 (Introduction to Computer System Engineering)\n- CCS270 (Data Structures & Algorithms) + CCS271 (Lab)\n\n**YEAR 3 - SPRING:**\n- Global Citizen Elective\n- CCS320 (Fundamentals of Operating Systems)\n- CME360 (Network and System Security)\n- CME310 (Computer Architecture and Organization) + CME311 (Lab)\n- ENG208 (Circuit and Electronics)\n\n**YEAR 4 - FALL:**\n- CME410 (Programming for Computer Engineering) + CME411 (Lab)\n- CME402 (Embedded and Microprocessor Systems) + CME421 (Lab)\n- CME490 (Capstone Design I)\n- Program Elective 1\n\n**YEAR 4 - SPRING:**\n- CME341 (Systems and Signal Processing)\n- Program Elective 2\n- Program Elective 3\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPUTING AND SYSTEMS PROGRAMS (Sample: Cyber Security Engineering - 132 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT101 (Calculus I)\n- PHY101 (Physics I) + PHY105 (Lab)\n- MAT120 (Discrete Mathematics)\n- INF120 (Computer & Information Systems)\n- Arts & Humanities Elective I\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- MAT102 (Calculus II)\n- CCS120 (Computational Thinking & Programming) + CCS121 (Lab)\n- CHM101/BIO101 (Chemistry I or Biology I) + CHM105/BIO105 (Lab)\n- GEN150 (Professionalism & Ethics)\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing & Research)\n- MAT202 (Linear Algebra)\n- MAT221 (Number Theory)\n- CCS220 (Object-Oriented Design & Programming) + CCS221 (Lab)\n- CCS200 (Digital Logic & Design)\n- MAT240 (Differential Equations)\n\n**YEAR 2 - SPRING:**\n- ENG304 (Engineering Probability & Statistics)\n- ENG308 (Numerical Methods)\n- CCS230 (Fundamentals of Database Systems) + CCS231 (Lab)\n- CCS241 (Fundamentals of Computer Networks)\n- Innovation & Creativity Elective\n- Arts & Humanities Elective II\n\n**YEAR 3 - FALL:**\n- HST101 (Islamic Culture & Values)\n- CSE210 (Fundamentals of Cyber Security Engineering)\n- CCS270 (Data Structures & Algorithms) + CCS271 (Lab)\n- CCS330 (Web Engineering) + CCS331 (Lab)\n- CSE341 (Network Security)\n\n**YEAR 3 - SPRING:**\n- Global Citizen Elective\n- CCS320 (Fundamentals of Operating Systems)\n- CSE310 (Cryptography & Data Security) + CSE311 (Lab)\n- CSE325 (Cybersecurity Risk Management) + CSE326 (Lab)\n- CSE360 (Ethical Hacking & Cyber Laws)\n\n**YEAR 4 - FALL:**\n- CSE410 (Digital Forensics) + CSE411 (Lab)\n- CSE430 (Web Security) + CSE431 (Lab)\n- CSE490 (Capstone Design I)\n- Program Elective 1\n\n**YEAR 4 - SPRING:**\n- CSE420 (Software Security) + CSE421 (Lab)\n- CSE491 (Capstone Design 2)\n- Program Elective 2\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPUTING AND SYSTEMS PROGRAMS (Sample: Software Engineering - 132 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT101 (Calculus I)\n- PHY101 (Physics I) + PHY105 (Lab)\n- MAT120 (Discrete Mathematics)\n- INF120 (Computer & Information Systems)\n- Arts & Humanities Elective I\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- MAT102 (Calculus II)\n- CCS120 (Computational Thinking & Programming) + CCS121 (Lab)\n- CHM101/BIO101 (Chemistry I or Biology I) + CHM105/BIO105 (Lab)\n- GEN150 (Professionalism & Ethics)\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing & Research)\n- MAT202 (Linear Algebra)\n- MAT221 (Number Theory)\n- CCS220 (Object-Oriented Design & Programming) + COS231 (Lab)\n- CCS200 (Digital Logic & Design)\n- MAT240 (Differential Equations)\n\n**YEAR 2 - SPRING:**\n- ENG304 (Engineering Probability & Statistics)\n- ENG308 (Numerical Methods)\n- CCS230 (Fundamentals of Database Systems) + CCS231 (Lab)\n- CCS241 (Fundamentals of Computer Networks)\n- Innovation & Creativity Elective\n- Arts & Humanities Elective II\n\n**YEAR 3 - FALL:**\n- HST101 (Islamic Culture & Values)\n- SWE301 (Software Process and Methodologies)\n- CCS270 (Data Structures & Algorithms) + CCS271 (Lab)\n- SWE305 (Software Requirements Engineering) + SWE306 (Lab)\n- Global Citizen Elective\n\n**YEAR 3 - SPRING:**\n- SWE345 (Software Modeling and Analysis)\n- CCS320 (Fundamentals of Operating Systems)\n- CCS330 (Web Engineering) + CCS331 (Lab)\n- SWE340 (Software Design and Architecture) + SWE341 (Lab)\n- SWE310 (Human-Computer Interaction) + SWE311 (Lab)\n\n**YEAR 4 - FALL:**\n- SWE405 (Software Testing and Quality Assurance) + SWE401 (Lab)\n- SWE420 (Software Construction and Evolution) + SWE421 (Lab)\n- SWE490 (Capstone Design I)\n- Program Elective 1\n\n**YEAR 4 - SPRING:**\n- SWE440 (Software Security Analysis)\n- SWE491 (Capstone Design 2)\n- Program Elective 2\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCOMPUTING AND SYSTEMS PROGRAMS (Sample: Data Science and AI - 120 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT101 (Calculus I)\n- PHY101 (Physics I) + PHY105 (Lab)\n- MAT120 (Discrete Mathematics)\n- INF120 (Computers & Information Systems)\n- Arts & Humanities Elective I\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- CHM101/BIO101 (Chemistry I or Biology I) + CHM105/BIO105 (Lab)\n- CCS120 (Computational Thinking & Programming) + CCS120 (Lab)\n- Arts & Humanities Elective II\n\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing & Research)\n- MAT202 (Linear Algebra)\n- DAI230 (Mathematics for Data Science & AI)\n- CCS220 (Object-Oriented Design & Programming) + CCS221 (Lab)\n- GEN130 (Professionalism & Ethics)\n\n**YEAR 2 - SPRING:**\n- HST101 (Islamic Culture & Values)\n- ENG304 (Engineering Probability & Statistics)\n- CCS230 (Fundamentals of Database Systems) + CCS231 (Lab)\n- Innovation & Creativity Elective\n- Arts & Humanities Elective III\n\n**YEAR 3 - FALL:**\n- Global Citizen Elective\n- ENG308 (Numerical Methods)\n- CCS270 (Data Structures & Algorithms) + CCS271 (Lab)\n- DAI280 (Fundamentals of Data Science & AI) + DAI281 (Lab)\n- CCS242 (IT Infrastructure)\n\n**YEAR 3 - SPRING:**\n- DAI340 (Distributed Computing)\n- DAI330 (Data Warehousing and Data Mining) + DAI331 (Lab)\n- DAI310 (Machine Learning) + DAI311 (Lab)\n- DAI321 (Data Analytics and Visualization)\n\n**YEAR 4 - FALL:**\n- DAI451 (Advanced Machine Learning) + DAI452 (Lab)\n- CCS330 (Web Engineering) + CCS331 (Lab)\n- DAI490 (Capstone Design 1)\n- Program Elective 1\n- DAI374 (Data Ethics, Governance, and Laws)\n\n**YEAR 4 - SPRING:**\n- DAI491 (Capstone Design 2)\n- DAI430 (Big Data Systems) + DAI431 (Lab)\n- Program Elective 2\n- Program Elective 3\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nDIGITAL MARKETING (120 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT100 (Business Math)\n- BUS100 (Introduction to Business Administration)\n- GEN150 (Professionalism and Ethics)\n- HST101 (Islamic Culture and Values)\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- INF120 (Computers and Information Systems)\n- ACC101 (Financial Accounting)\n- MRK103 (Principles of Marketing)\n- Art/Humanities Elective 1\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing and Research)\n- FIN102 (Principles of Finance)\n- BUS200 (Business Statistics)\n- DMK210 (Digital Marketing Fundamentals)\n- Global Citizen Elective\n\n**YEAR 2 - SPRING:**\n- BUS220 (Business Communication)\n- DMK220 (International Marketing Management)\n- DMK225 (Market Planning and Research)\n- DMK230 (Content Marketing)\n- Innovation & Creativity Elective\n\n**YEAR 3 - FALL:**\n- MIS300 (Management Information Systems)\n- DMK310 (Social Media Marketing)\n- DMK315 (E-commerce Marketing)\n- DMK325 (Digital Marketing Strategy)\n- Art/Humanities Elective 2\n\n**YEAR 3 - SPRING:**\n- MGT310 (Organizational Behavior)\n- DMK330 (Customer Relations and Consumer Behavior)\n- DMK420 (Mobile Applications Marketing)\n- DMK440 (Social Media and Web Analytics)\n- Program Elective 1\n\n**YEAR 4 - FALL:**\n- MGT340 (Operations Management)\n- DMK460 (Digital Advertising Campaign Management)\n- DMK475 (Legal and Ethical Issues in Digital Marketing)\n- Program Elective 2\n- DMK490 (Capstone Design)\n\n**YEAR 4 - SPRING:**\n- BUS345 (Business Research Methods)\n- MGT420 (Strategic Management)\n- DMK400 (Internship in Marketing)\n- Program Elective 3\n- Free Elective\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nENTREPRENEURSHIP & INNOVATION (120 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT100 (Business Math)\n- BUS100 (Introduction to Business Administration)\n- GEN150 (Professionalism and Ethics)\n- HST101 (Islamic Culture and Values)\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- INF120 (Computers and Information Systems)\n- ACC101 (Financial Accounting)\n- MRK103 (Principles of Marketing)\n- Art/Humanities Elective 1\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing and Research)\n- FIN102 (Principles of Finance)\n- BUS200 (Business Statistics)\n- EN1200 (Foundations of Management and Entrepreneurship 1)\n- Global Citizen Elective\n\n**YEAR 2 - SPRING:**\n- BUS220 (Business Communication)\n- EN1210 (Foundations of Business Analytics)\n- EN1215 (Entrepreneurship Leadership)\n- EN1220 (Foundations of Management and Entrepreneurship 2)\n- Innovation & Creativity Elective\n\n**YEAR 3 - FALL:**\n- MIS300 (Management Information Systems)\n- EN1225 (Socio-Ecological Systems)\n- EN1315 (Strategic Problem Solving)\n- EN1320 (Commercialization and Pitching)\n- Art/Humanities Elective 2\n\n**YEAR 3 - SPRING:**\n- MGT310 (Organizational Behavior)\n- EN1405 (Business Models and Plan)\n- EN1410 (Innovation and Sustainability)\n- EN1415 (Entrepreneurship and E-commerce)\n- Program Elective 1\n\n**YEAR 4 - FALL:**\n- MGT340 (Operations Management)\n- EN1435 (Entrepreneurial Marketing)\n- EN1455 (Entrepreneurship and Managing Technology Innovation)\n- Program Elective 2\n- EN1490 (Capstone Design)\n\n**YEAR 4 - SPRING:**\n- BUS345 (Business Research Methods)\n- MGT420 (Strategic Management)\n- EN1400 (Internship in Entrepreneurship and Innovation)\n- Program Elective 3\n- Free Elective\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nSUPPLY CHAIN & LOGISTICS MANAGEMENT (120 Credits)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**YEAR 1 - FALL:**\n- ENL101 (English for Academic Studies)\n- MAT100 (Business Math)\n- BUS100 (Introduction to Business Administration)\n- GEN150 (Professionalism and Ethics)\n- HST101 (Islamic Culture and Values)\n\n**YEAR 1 - SPRING:**\n- ENL102 (English Composition)\n- INF120 (Computers and Information Systems)\n- ACC101 (Financial Accounting)\n- MRK103 (Principles of Marketing)\n- Art/Humanities Elective 1\n\n**YEAR 2 - FALL:**\n- ENL201 (Writing and Research)\n- FIN102 (Principles of Finance)\n- BUS200 (Business Statistics)\n- SCL200 (Principle of Management)\n- Global Citizen Elective\n\n**YEAR 2 - SPRING:**\n- BUS220 (Business Communication)\n- SCL201 (Principle of Procurement Management)\n- SCL202 (Logistics management)\n- SCL203 (Principle of Supply Chain Management)\n- Innovation & Creativity Elective\n\n**YEAR 3 - FALL:**\n- MIS300 (Management Information Systems)\n- SCL310 (Business Quantitative Methods)\n- SCL315 (Management of Production and Operations)\n- SCL320 (Global Supply Chain Operations)\n- Art/Humanities Elective 2\n\n**YEAR 3 - SPRING:**\n- MGT310 (Organizational Behavior)\n- SCL340 (Risk Management in Supply Chain)\n- SCL401 (Business Process Integration)\n- SCL402 (Business Process Configuration)\n- Program Elective 1\n\n**YEAR 4 - FALL:**\n- MGT340 (Operations Management)\n- SCL410 (Supply Chain Sustainability)\n- SCL415 (Strategic Management)\n- Program Elective 2\n- SCL490 (Capstone Design)\n\n**YEAR 4 - SPRING:**\n- BUS345 (Business Research Methods)\n- MGT420 (Strategic Management)\n- SCL400 (Internship)\n- Program Elective 3\n- Free Elective\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Biomedical and Instruments Engineering)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- EXL101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CHM101 (Chemistry I) + CHM105 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- EXL102 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG208 (Electrical and Electronic Circuits)  \n- ENG204 (Engineering Mechanics)  \n- BIE101 (Human Biology for Engineers)  \n- HST101 (Islamic Culture and Values)  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ENG304 (Engineering Probability & Statistics)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- BIE203 (Human Anatomy and Physiology)  \n- BIE201 (Biochemistry) + BIE202 (Lab)  \n- ENL201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- ENG208 (Introduction to Energy and Sustainability)  \n- ENG308 (Numerical Methods)  \n- BIE350 (Signal Measurement Principles and Control Systems) + BIE351 (Lab)  \n- BIE301 (Bio/Instruments and Biomedical Transport Phenomena)  \n- Arts and Humanities Elective  \n\n**YEAR 3 - SPRING:**  \n- BIE302 (Biomaterials) + BIE303 (Lab)  \n- BIE352 (Instrumentation, Measurements, and Data Acquisition) + BIE353 (Lab)  \n- BIE304 (Biomechanics)  \n- Global Citizen Elective  \n- Innovation and Creativity Elective  \n\n**YEAR 4 - FALL:**  \n- ENG309 (Engineering Project Management and Economics)  \n- BIE371 (Medical Imaging Systems)  \n- BIE451 (Instrumentation Design) + BIE452 (Lab)  \n- BIE509 (Capstone Design I)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - SPRING:**  \n- BIE401 (Biomedical Molecular and Nano Devices)  \n- BIE491 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)  \n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Bioresources and Agricultural Engineering)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- ENL101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CEM101 (Chemistry I) + CEM105 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- ENL102 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG205 (Electrical and Electronic Circuits)  \n- ENG209 (Statics and Strength of Materials)  \n- HST101 (Islamic Culture and Values)  \n- Global Citizen Elective  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ENG308 (Numerical Methods)  \n- ENG304 (Engineering Probability & Statistics)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- ESE211 (Industrial Electronics)  \n- ENL201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- BIO101 (Biology)  \n- BAE101 (Introduction to Biosources and Agricultural Engineering) + BAE102 (Lab)  \n- BAE230 (Mechanical Systems in Agriculture I) + BAE231 (Lab)  \n- Innovation and Creativity Elective  \n\n**YEAR 3 - SPRING:**  \n- BAE320 (Agricultural Structures Planning)  \n- ENG208 (Introduction to Energy and Sustainability)  \n- ENG309 (Engineering Project Management and Economics)  \n- BAE330 (Mechanical Systems in Agriculture II) + BAE331 (Lab)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - FALL:**  \n- BAE450 (Agricultural Robotics and Automation) + BAE451 (Lab)  \n- BAE360 (Bioresource Engineering)  \n- BAE340 (Microbiology and Food Safety) + BAE341 (Lab)  \n- BAE491 (Capstone Design 1)  \n\n**YEAR 4 - SPRING:**  \n- BAE310 (Remote Sensing Data and Methods)  \n- BAE430 (Mechanical Systems in Agriculture III)  \n- BAE492 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)  \n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Energy Systems Engineering)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- ENL101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CEM101 (Chemistry I) + CIBM105 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- ENL102 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG205 (Electrical and Electronic Circuits)  \n- ENG209 (Statics and Strength of Materials)  \n- HST101 (Islamic Culture and Values)  \n- Global Citizen Elective  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ENG308 (Numerical Methods)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- ESE301 (Thermodynamics)  \n- ESE211 (Industrial Electronics)  \n- ENL201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- ENG304 (Engineering Probability & Statistics)  \n- RME304 (Instrumentation, Sensors, and Actuators)  \n- ESE312 (Electrical Machines and Drives)  \n- ESE302 (Thermo-fluid Systems)  \n- Innovation and Creativity Elective  \n- Arts and Humanities Elective  \n\n**YEAR 3 - SPRING:**  \n- ENG208 (Introduction to Energy and Sustainability)  \n- ENG309 (Engineering Project Management and Economics)  \n- ESE315 (Electrical Machines and Drives Lab)  \n- ESE314 (Power Systems Analysis)  \n- ESE305 (Thermal Systems Lab)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - FALL:**  \n- ESE321 (Renewable Energy Conversion)  \n- RME352 (Digital Systems Design & Microcontrollers) + RME353 (Lab)  \n- ESE315 (Power Systems Lab)  \n- ESE402 (Energy Efficient Buildings)  \n- ESE401 (Power Plants)  \n- ESE490 (Capstone Design 1)  \n\n**YEAR 4 - SPRING:**  \n- ESE425 (Renewable Energy Conversion Lab)  \n- RME360 (Control Systems Analysis & Design)  \n- ESE491 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)  \n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Environmental Engineering and Sustainability)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- ENL101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CEM101 (Chemistry I) + CEM103 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- ENL102 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG205 (Electrical and Electronic Circuits)  \n- ENG209 (Statics and Strength of Materials)  \n- HST101 (Islamic Culture and Values)  \n- Global Citizen Elective  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ENG308 (Numerical Methods)  \n- ENG304 (Engineering Probability & Statistics)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- ENG208 (Introduction to Energy and Sustainability)  \n- ENL201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- BIO101 (Biology)  \n- EES301 (Environmental Chemistry)  \n- ESE301 (Thermodynamics)  \n- EES303 (Environmental Management Systems)  \n- Innovation and Creativity Elective  \n- Arts and Humanities Elective  \n\n**YEAR 3 - SPRING:**  \n- EES303 (Sustainability Fundamentals)  \n- EES306 (Air Water Pollution Control Waste)  \n- ESE302 (Thermo-fluid Systems)  \n- EES308 (Soil, Solids, Hazardous Waste Control)  \n- ENG309 (Engineering Project Management and Economics)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - FALL:**  \n- EES508 (Waste Management Conversion Technology)  \n- EES504 (Water Supply and Sewerage Engineering)  \n- EES505 (Water Supply and Sewerage Engineering Lab)  \n- ESE305 (Thermal Systems Lab)  \n- EES507 (Environmental Impact Assessment Practices)  \n- EES490 (Capstone Design 1)  \n\n**YEAR 4 - SPRING:**  \n- EES402 (Sustainable Building Design)  \n- EES491 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)  \n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Materials Science and Engineering)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- EN1101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CID4101 (Chemistry I) + CIB4106 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- EN1202 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG208 (Electrical and Electronic Circuits)  \n- ENG209 (Statics and Strength of Materials)  \n- HST101 (Islamic Culture and Values)  \n- Global Citizen Elective  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ENG308 (Numerical Methods)  \n- ENG304 (Engineering Probability & Statistics)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- ENG208 (Introduction to Energy and Sustainability)  \n- EN201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- MSE301 (Thermodynamics of Materials)  \n- MSE302 (Materials Characterization)  \n- MSE308 (Materials Characterization Laboratory I)  \n- MSE211 (Introduction to Materials Science & Engineering)  \n- Innovation and Creativity Elective  \n- Arts and Humanities Elective  \n\n**YEAR 3 - SPRING:**  \n- MSE305 (Electronic Properties of Materials)  \n- MSE319 (Electronic Device Fabrication Lab)  \n- MSE303 (Structure & Bonding of Solids)  \n- MSE403 (Materials Characterization Laboratory II)  \n- MSE306 (Mechanical and Thermal Properties of Materials)  \n- MSE304 (Physical Chemistry)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - FALL:**  \n- MSE307 (Nanomaterials)  \n- MSE401 (Phase Diagrams & Phase Transformations)  \n- MSE309 (Materials Synthesis Laboratory)  \n- MSE400 (Diffusion and Kinetics in Materials)  \n- MSE311 (Material Properties Measurement Laboratory)  \n- MSE490 (Capstone Design 1)  \n\n**YEAR 4 - SPRING:**  \n- MSE402 (Materials for Renewable Energy & Storage Tech.)  \n- ENG309 (Engineering Project Management and Economics)  \n- MSE491 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)  \n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \nENGINEERING PROGRAMS (132 Credits - Sample: Robotics and Mechatronics Engineering)  \n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  \n\n**YEAR 1 - FALL:**  \n- EN101 (English for Academic Studies)  \n- MAT101 (Calculus I)  \n- PHY101 (Physics I) + PHY105 (Lab)  \n- CHM101 (Chemistry I) + CHM105 (Lab)  \n- GEN150 (Professionalism and Ethics)  \n\n**YEAR 1 - SPRING:**  \n- EN102 (English Composition)  \n- MAT102 (Calculus II)  \n- PHY102 (Physics II) + PHY107 (Lab)  \n- MAT202 (Linear Algebra)  \n- Global Citizen Elective  \n\n**YEAR 2 - FALL:**  \n- MAT201 (Calculus III)  \n- MAT240 (Differential Equations)  \n- ENG205 (Electrical and Electronic Circuits)  \n- ENG209 (Statics and Strength of Materials)  \n- HST101 (Islamic Culture and Values)  \n- Global Citizen Elective  \n\n**YEAR 2 - SPRING:**  \n- ENG207 (Programming)  \n- ESE211 (Industrial Electronics)  \n- ENG206 (Electrical and Electronic Circuits Lab)  \n- ENG208 (Introduction to Energy and Sustainability)  \n- Innovation and Creativity Elective  \n- EN201 (Writing and Research)  \n\n**YEAR 3 - FALL:**  \n- ENG308 (Numerical Methods)  \n- RME352 (Digital Systems Design & Microcontrollers) + RME353 (Lab)  \n- ENG304 (Engineering Probability & Statistics)  \n- MSE211 (Introduction to Materials Science & Engineering)  \n- Arts and Humanities Elective  \n\n**YEAR 3 - SPRING:**  \n- ENG309 (Engineering Project Management and Economics)  \n- RME360 (Control Systems Analysis & Design) + RME361 (Lab)  \n- RME301 (Introduction to Mechatronics and Robotics) + RME302 (Lab)  \n- RME304 (Instrumentation, Sensors, and Actuators)  \n- Arts and Humanities Elective  \n\n**YEAR 4 - FALL:**  \n- RME430 (Digital Signal Processing) + RME431 (Lab)  \n- RME460 (Design of Machine Elements)  \n- RME403 (Computer-Integrated Manufacturing Systems)  \n- RME363 (Engineering Mechanisms for Automation)  \n- RME490 (Capstone Design 1)  \n\n**YEAR 4 - SPRING:**  \n- RME401 (Robotics, Dynamics & Controls) + RME402 (Lab)  \n- RME491 (Capstone Design 2)  \n- Program Elective 1 (Table 13)  \n- Program Elective 2 (Table 13)  \n- Program Elective 3 (Table 13)\n\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nSUMMER COURSE RECOMMENDATIONS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🌞 **Recommended Summer Courses (All Majors):**\n\n**General Education Courses:**\n- GEN150 (Professionalism and Ethics)\n- HST101 (Islamic Culture and Values)\n- Art/Humanities Electives\n- Global Citizen Electives\n\n**Foundation Courses:**\n- MAT100/MAT101 (Mathematics foundation)\n- INF120 (Computers and Information Systems)\n- BUS100 (Introduction to Business Administration)\n\n**Avoid in Summer:**\n- Capstone courses\n- Advanced laboratory courses\n- Complex project-based courses\n- Courses with extensive prerequisites\n\n📊 **Summer Planning Strategies:**\n- **Accelerate graduation:** Take 2-3 general education courses each summer\n- **Reduce regular load:** Move lighter courses to summer for technical focus\n- **Prerequisite catch-up:** Use summer to complete prerequisites for fall courses\n- **Maximum summer load:** **9 credits** (typical: **6 credits**)\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCRITICAL PREREQUISITE CHAINS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n⚠️ **MUST FOLLOW THESE SEQUENCES:**\n\n**English Sequence:**\nENL101 → ENL102 → ENL201\n(Cannot skip levels)\n\n**Mathematics Sequences:**\nBusiness: MAT100 → MAT210\nEngineering: MAT101 → MAT102 → MAT201 → MAT240\n\n**Physics Sequence:**\nPHY101 + PHY105 → PHY102 + PHY107\n\n**Computing Foundation:**\nCCS120 → CCS220 → CCS270 → CCS320\n\n**Engineering Foundation:**\nENG205 → Program-specific advanced courses\n\n**Capstone Requirement:**\nComplete **96 credit hours** → Capstone Design 1 → Capstone Design 2\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nREGISTRATION TIPS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n💡 **Smart Registration Advice:**\n\n1. **Balance Your Load:**\n   - Mix difficult and easier courses each semester\n   - Spread laboratory courses across semesters\n   - Consider course workload and exam schedules\n\n2. **Prerequisite Planning:**\n   - Complete prerequisites early\n   - Don't delay math and science foundation courses\n   - Plan for course sequences that span multiple semesters\n\n3. **Elective Strategy:**\n   - Save interesting electives for later years\n   - Choose electives that complement your career goals\n   - Consider technical electives for specialization\n\n4. **Summer Optimization:**\n   - Use summer to stay on track if you fail a course\n   - Take general education courses to lighten regular semesters\n   - Consider internship opportunities during summer\n\n5. **Graduation Planning:**\n   - Review degree audit regularly\n   - Ensure you meet all credit requirements\n   - Plan capstone projects early\n\n🎯 **Key Milestones:**\n- **Year 1:** Complete all foundation courses\n- **Year 2:** Finish college requirements and begin major courses\n- **Year 3:** Complete core major requirements\n- **Year 4:** Focus on electives and capstone project\n\nALWAYS consult with your academic advisor before finalizing your course selection!\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nPREPARATORY COURSE REGISTRATION GUIDE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**PREPARATORY COURSES EXPLAINED:**\n- IEP098, IEP099: Intensive English Program (15 contact hours each)\n- IMP098, IMP099: Intermediate Math Preparatory (3 contact hours each)\n- DPS095: Digital Problem Solving (mandatory for all preparatory students)\n\n🎯 **PREPARATORY PROGRESSION RULES:**\n\n⚠️ **CRITICAL - NO SKIPPING LEVELS:**\n- English Progression: IEP098 → IEP099 → ENL101 (MUST go in sequence, cannot skip)\n- Math Progression: IMP098 → IMP099 → MTH courses (MUST go in sequence, cannot skip)\n- Must PASS BOTH IEP and IMP courses in a semester to progress to next level\n- Minimum TWO SEMESTERS required to complete preparatory program\n\n📊 **AFTER PASSING PREPARATORY COURSES (IEP098 + IMP098):**\n\n**If You Pass BOTH Courses:**\n- ✅ Can register for regular credit courses next semester\n- Maximum **17 credits** for regular students\n- Recommended first credit courses: ENL101, INF120, DPS095, General Education courses\n\n**If You Pass IEP098 ONLY:**\n- Take IEP099 next semester + available courses\n\n**If You Pass IMP098 ONLY:**\n- Take IMP099 next semester + up to **9 credits** of non-math/science courses\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nPREPARATORY PROGRAM - COMPLETE REGISTRATION GUIDE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎯 **PREPARATORY COURSES EXPLAINED:**\n\n**English Program:**\n- IEP098 (Intensive English Program) - 15 contact hours\n- IEP099 (Advanced English) - 15 contact hours\n- **Progression:** IEP098 → IEP099 → ENL101 (MUST pass 098 to take 099)\n\n**Mathematics Program:**\n- IMP098 (Intermediate Math Preparatory) - 3 contact hours\n- IMP099 (Precalculus) - 3 contact hours  \n- **Progression:** IMP098 → IMP099 → Math courses (MUST pass 098 to take 099)\n\n**Digital Skills:**\n- DPS095 (Digital Problem Solving) - Mandatory for all preparatory students\n\n⚠️ **CRITICAL RULES - NO EXCEPTIONS:**\n- MUST pass IEP098 before taking IEP099\n- MUST pass IMP098 before taking IMP099  \n- Cannot skip levels in English or Math sequences\n- Minimum TWO semesters required to complete preparatory program\n- Cannot take English-taught courses while in English preparatory\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nPREPARATORY PROGRESSION PATHS\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n🔄 **TYPICAL 2-SEMESTER PATH:**\n\n**SEMESTER 1:**\n- IEP098 (15H) + IMP098 (3H) = 18H total\n- **No additional courses allowed**\n\n**SEMESTER 2:**\n- **If pass both IEP098 and IMP098:** Take IEP099 + IMP099\n- **If pass IEP098 only:** Take IEP099 + IMP098 (retake)\n- **If pass IMP098 only:** Take IEP098 (retake) + IMP099\n- **If fail both:** Retake IEP098 + IMP098\n\n🎯 **AFTER COMPLETING PREPARATORY:**\n\n**Completed BOTH IEP099 and IMP099:**\n✅ Can register for regular credit courses\n✅ Maximum **17 credits** for regular students\n✅ Recommended first courses: ENL101, INF120, DPS095, General Education\n\n**Completed IEP099 ONLY:**\n➡️ Must complete IMP099 before taking math/science credit courses\n📝 Can take non-math courses while completing IMP099\n\n**Completed IMP099 ONLY:**\n➡️ Must complete IEP099 before taking English-taught credit courses  \n📝 Can take Arabic-taught courses while completing IEP099\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nPREPARATORY REGISTRATION CASES\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**FIRST REGISTRATION CASES:**\n\n**Case 1:** IEP098 and pass all IMP → Register: IEP098\n**Case 2:** IEP098 and IMP098 → Register: IEP098 and IMP098\n**Case 3:** IEP098 and IMP099 → Register: IEP098 and IMP099\n**Case 4:** IEP098 and pass all IMP → Register: IEP098\n**Case 5:** IEP098 and IMP098 → Register: IEP098 and IMP099\n**Case 6:** IEP098 and IMP099 → Register: IEP098 and IMP099\n**Case 7:** IMP098 and DPS095 and pass all IEP → Register: IMP098 and DPS095 + 6 credits\n**Case 8:** IMP098 and DPS095 and pass all IEP → Register: IMP098 + 9 credits\n**Case 9:** IMP098 and DPS095 and pass all IEP → Register: IMP098 and DPS095 + 6 credits\n**Case 10:** IMP098 and DPS095 and pass all IEP → Register: IMP098 + 9 credits\n\n**SECOND REGISTRATION CASES:**\n\n**Case 1:** IEP098 and DPS and pass all IMP → Register: IEP098 + DPS\n**Case 2:** IEP098 and pass DPS and all IMP → Register: IEP098 + 3 credits\n**Case 3:** IEP098 and IMP098 → Register: IEP098 and IMP098\n**Case 4:** IEP098 and IMP099 → Register: IEP098 and IMP099\n**Case 5:** IEP098 and DPS and pass all IMP → Register: IEP098 + DPS + 6 credits\n**Case 6:** IEP098 and pass DPS and all IMP → Register: IEP098 + 9 credits\n**Case 7:** IEP098 and IMP098 → Register: IEP098 and IMP098 + 3 credits\n**Case 8:** IEP098 and IMP098 and DPS → Register: IEP098 and IMP098 and DPS\n**Case 9:** IEP098 and IMP099 → Register: IEP098 and IMP099 + 3 credits\n**Case 10:** IEP098 and IMP098 and DPS → Register: IEP098 and IMP098 and DPS\n**Case 11:** IMP098 and DPS095 and pass all IEP → Register: IMP098 and DPS095 + 6 credits\n**Case 12:** IMP098 and DPS095 and pass all IEP → Register: IMP098 + 9 credits\n**Case 13:** IMP098 and DPS095 and pass all IEP → Register: IMP098 and DPS095 + 6 credits\n**Case 14:** IMP098 and DPS095 and pass all IEP → Register: IMP098 + 9 credits\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nCREDIT PLAN CASES\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**Case 1:** Taking IEP098 (15H) + Passed IEP099 + Taking IMP098 (3H) → Total: 15H\n**Case 2:** Passed IEP098 + Passed IEP099 + Passed IMP098 → 15H prep + 9 credits = 18H total → Block A\n**Case 3:** Passed IEP098 + Passed IEP099 + Passed IMP099 → 3H prep + 9 credits = 24H total → Block A\n**Case 4:** Passed IEP098 + Passed IEP099 + Passed IMP099 → 3H prep + 9 credits = 12H total → Block B\n**Case 5:** Passed IEP098 + Passed IEP099 + Passed IMP098 → 18H prep + 0 credits = 18H total → NONE\n**Case 6:** Passed IEP098 + Passed IEP099 + Passed IMP099 → 18H prep + 0 credits = 18H total → NONE\n**Case 7:** Passed IEP098 + Passed IEP099 + Passed IMP098 → 18H prep + 3 credits = 21H total → Block A\n**Case 8:** Passed IEP098 + Passed IEP099 + Passed IMP099 → 18H prep + 3 credits = 21H total → Block A\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nFREQUENTLY ASKED QUESTIONS (FAQs)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**NOTE:** When answering, use ONLY the language that matches the student's question.\n\n📋 **ADMISSION REQUIREMENTS & POLICIES:**\n\nQ: What are admission requirements?\nA: Full admission policy available at: https://aasu.edu.kw/media/dmmjn2h5/admission-regulations-ay-2025-2026.pdf\n\nQ: What are admission percentages? Minimum percentages?\nA: Minimum percentages for Kuwaiti students:\n- **Arts Track:** **85%**\n- **Science Track:** **80%**\n\nQ: Do I need aptitude tests (Qudurat)?\nA: Yes, Kuwait University aptitude tests (English + Math) results are required for admission calculation.\n\nQ: How do I calculate my comparative percentage?\nA: Use AASU's calculator: https://aasu.edu.kw/comparative-percentages/\n\n🎓 **ATTENDANCE & ABSENCES:**\n\nQ: What's the absence policy? Do I need medical notes?\nA: Absence Policy:\n- **Week 1 absences:** First Warning\n- **Week 2 absences:** Second Warning  \n- **After Week 2:** Any further absences = FA grade (Fail due to Absence)\n- **Medical notes DO NOT cancel absences** - they are counted within total absences\n\n📝 **COURSE MANAGEMENT:**\n\nQ: Can I withdraw from a course now?\nA: Last day for course withdrawal (maintaining minimum 12 credit hours) is listed in the academic calendar. Check the specific date for current semester.\n\nQ: Can I retake courses?\nA: Retake Policy:\n- **Preparatory courses:** Can retake ONCE only\n- **Credit courses:** First retake replaces previous grade (allowed only if you got C- or lower)\n\nQ: Can I defer admission?\nA: Yes, deferral allowed for ONE semester only. Submit deferral request to Admissions & Registration before deadlines in academic calendar.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nFALLBACK RESPONSE PROTOCOL\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nIf you're not sure about specific details:\n- Politely tell the student you don't have that information currently\n- Direct them to visit the Registration Office or contact: studentaffairs@aasu.edu.kw or it.helpdesk@aasu.edu.kw\n- Mention their question will be added to the system soon\n- Respond in the same language as the question\n\n**Example responses:**\nArabic: \"عذراً، ليس لدي هذه المعلومة حالياً. يرجى زيارة مكتب القبول والتسجيل أو التواصل معهم عبر البريد الإلكتروني studentaffairs@aasu.edu.kw للمساعدة. سيتم إضافة إجابتك للنظام قريباً! ✨\"\n\nEnglish: \"Sorry, I don't have that information right now. Please visit the Registration Office or contact them at studentaffairs@aasu.edu.kw for assistance. Your question will be added to the system soon! ✨\"\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nRESPONSE EXAMPLES - BE CONCISE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n**EXAMPLE 1 - Specific Question (Final Exams Date):**\nQuestion: \"final exams date in fall semester\"\nResponse: \"📅 **December 24, 2025 - January 6, 2026**\"\n\n**EXAMPLE 2 - Broader Question (Admission Requirements):**\nQuestion: \"Engineering admission requirements\"\nResponse: 🎓 **Engineering Admission Requirements**\n\n📋 **Basic Requirements:**\n- **Academic Track:** Science only\n- **Minimum Grade:** **80%** in secondary school\n- **Application Fee:** **10 KD**\n\n📊 **Competitive Percentage:**\n- **65%** - High school grade\n- **15%** - English test  \n- **20%** - Math test\n\n**EXAMPLE 3 - Transfer Requirements:**\nQuestion: \"transfer to business college requirements\"\nResponse: 📚 **Required Courses for Transfer to Business:**\n\n**English (choose ONE):**\n- ENL101 (English for Academic Studies) **OR**\n- ENL102 (English Composition) **OR**\n- ENL201 (Writing and Research)\n\n**Business (choose ONE):**\n- BUS100 (Introduction to Business Administration) **OR**\n- BUS101 (Entrepreneurship Essentials)\n\n**Mathematics (choose ONE):**\n- MAT100 (Business Math) **OR**\n- MAT101 (Calculus I) **OR**\n- MAT102 (Calculus II)\n\n**EXAMPLE 4 - Computing Program Question:**\nQuestion: \"Software Engineering math requirements\"\nResponse: 🎯 **Software Engineering Math Requirements:**\n\n**Required Mathematics:**\n- MAT101 (Calculus I)\n- MAT102 (Calculus II) \n- MAT120 (Discrete Mathematics) - **Take in Year 1**\n- MAT202 (Linear Algebra)\n- ENG304 (Probability and Statistics)\n\n**NOTE:** Software Engineering does NOT require Calculus III (MAT201)\n\n**EXAMPLE 5 - Discrete Mathematics Importance:**\nQuestion: \"When to take discrete mathematics?\"\nResponse: \"**Take MAT120 (Discrete Mathematics) in your FIRST YEAR.** It unlocks programming courses and is required for CCS220 (Programming Fundamentals 2) and all subsequent computing courses.\"\n\nALWAYS be concise, direct, and match the user's language exactly!`,\n        },\n        ...conversationHistory,\n        {\n          role: \"user\",\n          content: userMessage,\n        },\n      ],\n      max_tokens: 2048,\n      temperature: 0.3,\n    });\n\n    const botResponse =\n      response.choices[0]?.message?.content ||\n      \"I couldn't generate a response. Please try again.\";\n    return formatResponse(botResponse);\n  } catch (error) {\n    console.error(\"❌ OpenAI API error:\", error);\n\n    const userLanguage = detectLanguage(userMessage);\n    if (userLanguage === \"arabic\") {\n      return \"عذراً، أواجه مشكلة في الاتصال حالياً. يرجى المحاولة مرة أخرى بعد قليل.\";\n    }\n\n    return \"I'm having trouble connecting to my AI service right now. Please try again in a moment.\";\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({\n      status: \"healthy\",\n      openai: openaiClient ? \"connected\" : \"not configured\",\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // Get chat messages (optionally filtered by session)\n  app.get(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string | undefined;\n      const messages = sessionId\n        ? await storage.getChatMessagesBySession(sessionId)\n        : await storage.getChatMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"❌ Failed to fetch messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Send a new chat message\n  app.post(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const messageData = insertChatMessageSchema.parse(req.body);\n      const message = await storage.createChatMessage(messageData);\n\n      // Get bot response using OpenAI for user messages\n      if (messageData.isUser) {\n        const sessionAtRequest = currentChatSession;\n        const sessionId = message.sessionId;\n\n        // Fetch conversation history for context\n        const sessionMessages =\n          await storage.getChatMessagesBySession(sessionId);\n        const conversationHistory = sessionMessages\n          .filter((msg) => msg.id !== message.id)\n          .map((msg) => ({\n            role: msg.isUser ? (\"user\" as const) : (\"assistant\" as const),\n            content: msg.content,\n          }));\n\n        // Get bot response asynchronously\n        getBotResponse(messageData.content, conversationHistory)\n          .then(async (botResponse) => {\n            // Only store if session hasn't been cleared\n            if (sessionAtRequest === currentChatSession) {\n              const botMessage = await storage.createChatMessage({\n                sessionId: sessionId,\n                content: botResponse,\n                isUser: false,\n              });\n\n              // Create Pickaxe job for comparison\n              await storage.createPickaxeJob({\n                messageId: botMessage.id,\n                question: messageData.content,\n              });\n            }\n          })\n          .catch((error) => {\n            console.error(\"❌ Failed to get bot response:\", error);\n          });\n      }\n\n      res.json(message);\n    } catch (error) {\n      console.error(\"❌ Failed to create message:\", error);\n\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Invalid message format\",\n          details: error.errors,\n        });\n      } else {\n        res.status(500).json({ error: \"Failed to create message\" });\n      }\n    }\n  });\n\n  // Clear chat messages (optionally for a specific session)\n  app.delete(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId as string | undefined;\n\n      if (sessionId) {\n        await storage.clearSessionMessages(sessionId);\n        currentChatSession++;\n        res.json({\n          success: true,\n          message: \"Session messages cleared\",\n          sessionId,\n        });\n      } else {\n        await storage.clearChatMessages();\n        currentChatSession++;\n        res.json({\n          success: true,\n          message: \"All messages cleared\",\n        });\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to clear messages:\", error);\n      res.status(500).json({ error: \"Failed to clear messages\" });\n    }\n  });\n\n  // Get pending Pickaxe jobs\n  app.get(\"/api/pickaxe/jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getPendingPickaxeJobs();\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"❌ Failed to fetch pending jobs:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending jobs\" });\n    }\n  });\n\n  // Submit response for a Pickaxe job\n  app.post(\"/api/pickaxe/jobs/:id/response\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { response } = req.body;\n\n      if (!response || typeof response !== \"string\") {\n        return res\n          .status(400)\n          .json({ error: \"Response is required and must be a string\" });\n      }\n\n      // Update job response\n      await storage.updatePickaxeJobResponse(id, response);\n\n      // Find the job to get the message ID\n      const memStorage = storage as any;\n      if (memStorage.pickaxeJobs) {\n        const allJobs: PickaxeJob[] = Array.from(\n          memStorage.pickaxeJobs.values(),\n        );\n        const job = allJobs.find((j) => j.id === id);\n\n        if (job) {\n          // Update the chat message with Pickaxe response\n          await storage.updateChatMessagePickaxeResponse(\n            job.messageId,\n            response,\n          );\n        }\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"❌ Failed to update Pickaxe job response:\", error);\n      res.status(500).json({ error: \"Failed to update job response\" });\n    }\n  });\n\n  // Get session info\n  app.get(\"/api/chat/session\", (req, res) => {\n    res.json({\n      sessionId: currentChatSession,\n      openaiConfigured: !!openaiClient,\n    });\n  });\n\n  const httpServer = createServer(app);\n  console.log(\"✅ Chat routes registered successfully\");\n\n  return httpServer;\n}\n","size_bytes":92999},"server/storage.ts":{"content":"import { type User, type InsertUser, type ChatMessage, type InsertChatMessage, type PickaxeJob, type InsertPickaxeJob } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getChatMessages(): Promise<ChatMessage[]>;\n  getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  updateChatMessagePickaxeResponse(id: string, response: string): Promise<void>;\n  clearChatMessages(): Promise<void>;\n  clearSessionMessages(sessionId: string): Promise<void>;\n  createPickaxeJob(job: InsertPickaxeJob): Promise<PickaxeJob>;\n  getPendingPickaxeJobs(): Promise<PickaxeJob[]>;\n  updatePickaxeJobResponse(id: string, response: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private chatMessages: Map<string, ChatMessage>;\n  private pickaxeJobs: Map<string, PickaxeJob>;\n\n  constructor() {\n    this.users = new Map();\n    this.chatMessages = new Map();\n    this.pickaxeJobs = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getChatMessages(): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values()).sort(\n      (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n    );\n  }\n\n  async getChatMessagesBySession(sessionId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(msg => msg.sessionId === sessionId)\n      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      id,\n      sessionId: insertMessage.sessionId ?? randomUUID(),\n      content: insertMessage.content,\n      isUser: insertMessage.isUser ?? false,\n      pickaxeResponse: null,\n      timestamp: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async updateChatMessagePickaxeResponse(id: string, response: string): Promise<void> {\n    const message = this.chatMessages.get(id);\n    if (message) {\n      message.pickaxeResponse = response;\n      this.chatMessages.set(id, message);\n    }\n  }\n\n  async clearChatMessages(): Promise<void> {\n    this.chatMessages.clear();\n  }\n\n  async clearSessionMessages(sessionId: string): Promise<void> {\n    const messagesToDelete = Array.from(this.chatMessages.entries())\n      .filter(([_, msg]) => msg.sessionId === sessionId)\n      .map(([id, _]) => id);\n    \n    messagesToDelete.forEach(id => this.chatMessages.delete(id));\n  }\n\n  async createPickaxeJob(insertJob: InsertPickaxeJob): Promise<PickaxeJob> {\n    const id = randomUUID();\n    const job: PickaxeJob = {\n      id,\n      messageId: insertJob.messageId,\n      question: insertJob.question,\n      response: null,\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    this.pickaxeJobs.set(id, job);\n    return job;\n  }\n\n  async getPendingPickaxeJobs(): Promise<PickaxeJob[]> {\n    return Array.from(this.pickaxeJobs.values())\n      .filter(job => job.status === \"pending\")\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  async updatePickaxeJobResponse(id: string, response: string): Promise<void> {\n    const job = this.pickaxeJobs.get(id);\n    if (job) {\n      job.response = response;\n      job.status = \"completed\";\n      this.pickaxeJobs.set(id, job);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4113},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().default(sql`gen_random_uuid()`),\n  content: text(\"content\").notNull(),\n  isUser: boolean(\"is_user\").notNull().default(false),\n  pickaxeResponse: text(\"pickaxe_response\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\nexport const pickaxeJobs = pgTable(\"pickaxe_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messageId: varchar(\"message_id\").notNull(),\n  question: text(\"question\").notNull(),\n  response: text(\"response\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  sessionId: true,\n  content: true,\n  isUser: true,\n});\n\nexport const insertPickaxeJobSchema = createInsertSchema(pickaxeJobs).pick({\n  messageId: true,\n  question: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type PickaxeJob = typeof pickaxeJobs.$inferSelect;\nexport type InsertPickaxeJob = z.infer<typeof insertPickaxeJobSchema>;\n","size_bytes":1879},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Chat from \"@/pages/chat\";\nimport PickaxeRunner from \"@/pages/pickaxe-runner\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Chat} />\n      <Route path=\"/internal/pickaxe-runner\" component={PickaxeRunner} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":825},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(216, 20%, 98%);\n  --foreground: hsl(220, 10%, 10%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 10%, 10%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 10%, 10%);\n  --primary: hsl(210, 100%, 12%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 100%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(216, 20%, 96%);\n  --muted-foreground: hsl(220, 10%, 40%);\n  --accent: hsl(210, 100%, 65%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(210, 100%, 40%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Chat-specific variables */\n  --chat-gradient-start: hsl(210, 100%, 12%);\n  --chat-gradient-end: hsl(210, 100%, 40%);\n  --chat-user-bg: linear-gradient(to right, hsl(210, 100%, 50%), hsl(210, 100%, 45%));\n  --chat-bot-bg: hsl(0, 0%, 100%);\n  --chat-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .chat-gradient-bg {\n    background: linear-gradient(135deg, var(--chat-gradient-start) 0%, var(--chat-gradient-end) 100%);\n  }\n  \n  .chat-message-enter {\n    animation: slideUp 0.4s ease-out;\n  }\n  \n  .chat-fade-in {\n    animation: fadeIn 0.5s ease-in;\n  }\n  \n  .chat-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: #d1d5db;\n    border-radius: 3px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: #9ca3af;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounceDots {\n  0%, 80%, 100% {\n    transform: scale(0);\n    opacity: 0.5;\n  }\n  40% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n","size_bytes":6630},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-message.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Bot, User } from \"lucide-react\";\nimport { ChatMessage } from \"@shared/schema\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\ninterface ChatMessageProps {\n  message: ChatMessage;\n  delay?: number;\n}\n\nexport default function ChatMessageComponent({ message, delay = 0 }: ChatMessageProps) {\n  const isUser = message.isUser;\n  const timeAgo = new Date(message.timestamp).toLocaleTimeString([], { \n    hour: '2-digit', \n    minute: '2-digit',\n    hour12: false\n  });\n\n  // Use Pickaxe response if available, otherwise use DeepSeek content\n  const displayContent = !isUser && message.pickaxeResponse \n    ? message.pickaxeResponse \n    : message.content;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4, delay }}\n      className={`flex items-start gap-3 ${isUser ? 'justify-end' : ''}`}\n      data-testid={`message-${message.id}`}\n    >\n      {!isUser && (\n        <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-5 h-5 text-white\" />\n        </div>\n      )}\n      \n      <div className={`flex-1 ${isUser ? 'flex flex-col items-end' : ''}`}>\n        <div \n          className={`${\n            isUser \n              ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-2xl rounded-tr-md' \n              : 'bg-white rounded-2xl rounded-tl-md'\n          } shadow-sm px-4 py-3 max-w-md sm:max-w-lg`}\n        >\n          {isUser ? (\n            <p className=\"text-sm sm:text-base text-white whitespace-pre-wrap\">\n              {message.content}\n            </p>\n          ) : (\n            <div className=\"text-sm sm:text-base text-foreground markdown-content\">\n              <ReactMarkdown \n                remarkPlugins={[remarkGfm]}\n                components={{\n                  p: ({children}) => <p className=\"mb-3 last:mb-0\">{children}</p>,\n                  strong: ({children}) => <strong className=\"font-bold text-blue-600\">{children}</strong>,\n                  ul: ({children}) => <ul className=\"space-y-1.5 my-2\">{children}</ul>,\n                  ol: ({children}) => <ol className=\"space-y-1.5 my-2 list-decimal list-inside\">{children}</ol>,\n                  li: ({children}) => <li className=\"leading-relaxed\">{children}</li>,\n                  h1: ({children}) => <h1 className=\"text-xl font-bold mb-2 mt-3 first:mt-0\">{children}</h1>,\n                  h2: ({children}) => <h2 className=\"text-lg font-bold mb-2 mt-3 first:mt-0\">{children}</h2>,\n                  h3: ({children}) => <h3 className=\"text-base font-bold mb-2 mt-2 first:mt-0\">{children}</h3>,\n                  hr: () => <hr className=\"my-3 border-gray-200\" />,\n                }}\n              >\n                {displayContent}\n              </ReactMarkdown>\n            </div>\n          )}\n        </div>\n        <span className={`text-xs text-muted-foreground mt-1 block ${isUser ? 'mr-1' : 'ml-1'}`}>\n          {timeAgo}\n        </span>\n      </div>\n      \n      {isUser && (\n        <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-gray-500 to-gray-600 flex items-center justify-center flex-shrink-0\">\n          <User className=\"w-5 h-5 text-white\" />\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":3388},"client/src/components/typing-indicator.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Bot } from \"lucide-react\";\n\nexport default function TypingIndicator() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      transition={{ duration: 0.3 }}\n      className=\"flex items-start gap-3\"\n      data-testid=\"typing-indicator\"\n    >\n      <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center flex-shrink-0\">\n        <Bot className=\"w-4 h-4 text-white\" />\n      </div>\n      <div className=\"inline-flex gap-1 p-3 bg-white rounded-2xl rounded-tl-md shadow-sm\">\n        {[0, 1, 2].map((index) => (\n          <motion.div\n            key={index}\n            className=\"w-2 h-2 bg-blue-500 rounded-full\"\n            animate={{\n              scale: [0, 1, 0],\n              opacity: [0.5, 1, 0.5],\n            }}\n            transition={{\n              duration: 1.4,\n              repeat: Infinity,\n              delay: index * 0.16,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":1147},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Bot, User, Send, Paperclip, Shield, MoreVertical, MessageCircle, Calendar, FileText, AlertTriangle, RotateCcw, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ChatMessage } from \"@shared/schema\";\nimport ChatMessageComponent from \"@/components/chat-message\";\nimport TypingIndicator from \"@/components/typing-indicator\";\nimport { nanoid } from \"nanoid\";\nimport aasuLogo from \"@assets/image_1759588573040.png\";\nimport robotLogo from \"@assets/image_1759588700976.png\";\nimport Tesseract from \"tesseract.js\";\n\n// Helper function to get or create session ID\nfunction getSessionId(): string {\n  const stored = localStorage.getItem(\"chatSessionId\");\n  if (stored) return stored;\n  \n  const newSessionId = nanoid();\n  localStorage.setItem(\"chatSessionId\", newSessionId);\n  return newSessionId;\n}\n\nexport default function Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId, setSessionId] = useState(getSessionId());\n  const [isScanning, setIsScanning] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  const { data: messages = [], isLoading } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat/messages\", sessionId],\n    queryFn: async () => {\n      const response = await fetch(`/api/chat/messages?sessionId=${sessionId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch messages\");\n      return response.json();\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat/messages\", {\n        sessionId,\n        content,\n        isUser: true,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\", sessionId] });\n      setIsTyping(true);\n      \n      // Poll for bot response every 2 seconds for up to 30 seconds\n      let pollCount = 0;\n      const maxPolls = 15; // 15 * 2 seconds = 30 seconds max wait\n      const pollInterval = setInterval(() => {\n        pollCount++;\n        queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\", sessionId] });\n        \n        // Stop polling after max attempts\n        if (pollCount >= maxPolls) {\n          clearInterval(pollInterval);\n          setIsTyping(false);\n        }\n        \n        // Check if we got a bot response\n        const currentMessages = queryClient.getQueryData<ChatMessage[]>([\"/api/chat/messages\", sessionId]);\n        if (currentMessages && currentMessages.length > 0) {\n          const lastMessage = currentMessages[currentMessages.length - 1];\n          if (!lastMessage.isUser) {\n            clearInterval(pollInterval);\n            setIsTyping(false);\n          }\n        }\n      }, 2000);\n    },\n  });\n\n  const clearMessagesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", `/api/chat/messages?sessionId=${sessionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/chat/messages\", sessionId], []);\n      setIsTyping(false);\n      setMessage(\"\");\n    },\n  });\n\n  const startNewChatMutation = useMutation({\n    mutationFn: async () => {\n      // Create a new session ID\n      const newSessionId = nanoid();\n      localStorage.setItem(\"chatSessionId\", newSessionId);\n      setSessionId(newSessionId);\n      return newSessionId;\n    },\n    onSuccess: (newSessionId) => {\n      // Clear the old query cache for the previous session\n      queryClient.setQueryData([\"/api/chat/messages\", newSessionId], []);\n      setIsTyping(false);\n      setMessage(\"\");\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    \n    const messageToSend = message.trim();\n    setMessage(\"\");\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n    }\n    \n    await sendMessageMutation.mutateAsync(messageToSend);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n    // Auto-expand textarea\n    e.target.style.height = \"auto\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setMessage(suggestion);\n    textareaRef.current?.focus();\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Check if file is an image\n    if (!file.type.startsWith('image/')) {\n      alert('Please select an image file (JPG, PNG, etc.)');\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      // Use Tesseract.js to extract text from the image\n      const result = await Tesseract.recognize(\n        file,\n        'eng+ara', // Support both English and Arabic\n        {\n          logger: (m) => console.log(m), // Log progress\n        }\n      );\n\n      const extractedText = result.data.text.trim();\n      \n      if (extractedText) {\n        // Add extracted text to message input\n        setMessage((prev) => prev ? `${prev}\\n\\n📄 Scanned text:\\n${extractedText}` : `📄 Scanned text:\\n${extractedText}`);\n        textareaRef.current?.focus();\n      } else {\n        alert('No text found in the image. Please try a clearer image.');\n      }\n    } catch (error) {\n      console.error('OCR Error:', error);\n      alert('Failed to scan document. Please try again.');\n    } finally {\n      setIsScanning(false);\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleAttachmentClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const suggestions = [\n    { icon: Calendar, text: \"Academic Calender\", color: \"text-yellow-500\" },\n    { icon: FileText, text: \"Internal Transfer Regulation\", color: \"text-blue-500\" },\n    { icon: AlertTriangle, text: \"Warning Policy\", color: \"text-purple-500\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <header className=\"chat-gradient-bg text-white py-4 px-6 shadow-lg\">\n        <div className=\"max-w-6xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-white rounded-lg flex items-center justify-center p-1\">\n              <img src={aasuLogo} alt=\"AASU Logo\" className=\"w-full h-full object-contain\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold\">AASU AI Assistant</h1>\n              <p className=\"text-xs text-white/80\">Always here to help</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            <span className=\"hidden sm:flex items-center gap-2 text-sm bg-white/10 px-3 py-1.5 rounded-full\">\n              <span className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></span>\n              Online\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => startNewChatMutation.mutate()}\n              disabled={startNewChatMutation.isPending}\n              className=\"w-9 h-9 bg-white/10 hover:bg-white/20 text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"new-chat-button\"\n              title=\"New chat\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-9 h-9 bg-white/10 hover:bg-white/20 text-white\"\n              data-testid=\"menu-button\"\n            >\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Chat Container */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"max-w-6xl w-full mx-auto flex-1 flex flex-col px-4 sm:px-6 lg:px-8 py-6\">\n          \n          {/* Welcome Section */}\n          {messages.length === 0 && !isLoading && (\n            <motion.div \n              className=\"flex-1 flex items-center justify-center text-center\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div>\n                <h2 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">Welcome to AASU AI Assistant</h2>\n                <p className=\"text-muted-foreground text-sm sm:text-base\">Ask me anything, I'm here to help you 24/7</p>\n              </div>\n            </motion.div>\n          )}\n\n          {/* Chat Messages Area */}\n          <div className=\"flex-1 overflow-y-auto custom-scrollbar scroll-smooth space-y-4 mb-6\">\n            <AnimatePresence>\n              {messages.map((msg, index) => (\n                <ChatMessageComponent\n                  key={msg.id}\n                  message={msg}\n                  delay={index * 0.1}\n                />\n              ))}\n            </AnimatePresence>\n            \n            {isTyping && <TypingIndicator />}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Quick Suggestions */}\n          {messages.length === 0 && !isLoading && (\n            <motion.div \n              className=\"mb-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n            >\n              <p className=\"text-xs text-muted-foreground mb-2 px-1\">Quick suggestions:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {suggestions.map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    className=\"px-4 py-2 bg-white hover:bg-gray-50 text-foreground text-sm rounded-full border border-border transition-all hover:shadow-md hover:scale-105\"\n                    onClick={() => handleSuggestionClick(suggestion.text)}\n                    data-testid={`suggestion-${index}`}\n                  >\n                    <suggestion.icon className={`w-4 h-4 mr-2 ${suggestion.color}`} />\n                    {suggestion.text}\n                  </Button>\n                ))}\n              </div>\n            </motion.div>\n          )}\n\n          {/* Message Input Area */}\n          <motion.div \n            className=\"bg-white rounded-2xl shadow-lg border border-border p-3 sm:p-4\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n          >\n            <form onSubmit={handleSubmit} className=\"flex items-end gap-2 sm:gap-3\">\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                aria-label=\"Upload document\"\n              />\n              <div className=\"flex-1\">\n                <Textarea\n                  ref={textareaRef}\n                  value={message}\n                  onChange={handleInputChange}\n                  onKeyDown={handleKeyDown}\n                  placeholder={isScanning ? \"Scanning document...\" : \"Type your message here...\"}\n                  className=\"min-h-[44px] max-h-32 resize-none border-0 bg-transparent text-foreground placeholder-muted-foreground focus:outline-none text-sm sm:text-base focus-visible:ring-2 focus-visible:ring-ring p-2 rounded-lg\"\n                  data-testid=\"message-input\"\n                  disabled={isScanning}\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={handleAttachmentClick}\n                  disabled={isScanning}\n                  className=\"w-9 h-9 sm:w-10 sm:h-10 bg-gray-100 hover:bg-gray-200 text-muted-foreground rounded-xl transition-all hover:scale-105 disabled:opacity-50\"\n                  data-testid=\"attach-button\"\n                  title=\"Upload and scan document\"\n                >\n                  {isScanning ? (\n                    <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n                  ) : (\n                    <Paperclip className=\"w-4 h-4\" />\n                  )}\n                </Button>\n                <Button\n                  type=\"submit\"\n                  size=\"icon\"\n                  disabled={!message.trim() || sendMessageMutation.isPending}\n                  className=\"w-9 h-9 sm:w-10 sm:h-10 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-xl transition-all hover:scale-105 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                  data-testid=\"send-button\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </form>\n            <div className=\"mt-2 flex items-center justify-between text-xs text-muted-foreground px-2\">\n              <span className=\"flex items-center gap-1\">\n                <Shield className=\"w-3 h-3 text-green-500\" />\n                Your data is secure\n              </span>\n              <span className=\"hidden sm:inline\">Press Enter to send</span>\n            </div>\n          </motion.div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-border py-4 px-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <p className=\"text-center text-xs sm:text-sm text-muted-foreground\">\n            Powered by AI • <a href=\"#\" className=\"text-secondary hover:underline\">Privacy Policy</a> • <a href=\"#\" className=\"text-secondary hover:underline\">Terms of Service</a>\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14830},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/pickaxe-runner.tsx":{"content":"import { useEffect, useState } from \"react\";\n\nexport default function PickaxeRunner() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://studio.pickaxe.co/api/embed/bundle.js\";\n    script.defer = true;\n    script.onload = () => {\n      console.log(\"Pickaxe embed loaded successfully\");\n      setIsLoading(false);\n    };\n    script.onerror = () => {\n      console.error(\"Failed to load Pickaxe embed\");\n      setError(\"Failed to load Pickaxe embed\");\n      setIsLoading(false);\n    };\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Poll for pending jobs every 5 seconds\n    const pollJobs = async () => {\n      try {\n        const response = await fetch(\"/api/pickaxe/jobs\");\n        if (!response.ok) {\n          console.error(\"Failed to fetch pending jobs\");\n          return;\n        }\n\n        const jobs = await response.json();\n        if (jobs.length === 0) return;\n\n        // Process the first pending job\n        const job = jobs[0];\n        console.log(\"Processing Pickaxe job:\", job);\n\n        // Try to interact with Pickaxe embed\n        // This will need to be customized based on how Pickaxe's embed actually works\n        // For now, we'll log the attempt\n        try {\n          // Wait for Pickaxe widget to be ready\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          // The actual interaction will depend on Pickaxe's widget API\n          // We'll need to inspect the widget to find how to programmatically send messages\n          console.log(\"Would send to Pickaxe:\", job.question);\n\n          // For now, send a placeholder response back\n          // This will be replaced with actual Pickaxe response extraction\n          const pickaxeResponse = \"Pickaxe worker is running and receiving jobs. Widget interaction needs to be implemented based on Pickaxe's API.\";\n\n          // Submit the response back to the backend\n          await fetch(`/api/pickaxe/jobs/${job.id}/response`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ response: pickaxeResponse }),\n          });\n\n          console.log(\"Pickaxe response submitted successfully\");\n        } catch (error) {\n          console.error(\"Error processing Pickaxe job:\", error);\n        }\n      } catch (error) {\n        console.error(\"Error polling for jobs:\", error);\n      }\n    };\n\n    // Start polling after embed loads\n    if (!isLoading && !error) {\n      const interval = setInterval(pollJobs, 5000);\n      // Also run once immediately\n      pollJobs();\n\n      return () => clearInterval(interval);\n    }\n  }, [isLoading, error]);\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <h1>Pickaxe Worker (Hidden Page)</h1>\n      <p>This page runs in the background to process Pickaxe jobs.</p>\n      \n      {isLoading && <p>Loading Pickaxe embed...</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n      {!isLoading && !error && <p style={{ color: \"green\" }}>Pickaxe worker is running</p>}\n\n      <div id=\"deployment-db3907fd-d283-4eb4-b96b-0a777b753af5\"></div>\n    </div>\n  );\n}\n","size_bytes":3373}},"version":1}